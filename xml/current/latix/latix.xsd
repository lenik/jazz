<?xml version="1.0" encoding="UTF-8"?><!-- edited with XMLSPY v2004 rel. 3 U (http://www.xmlspy.com) by CPU007 (STUPYNOMAGIC) --><xs:schema targetNamespace="http://www.bodz.net/xml/draft/lang/tix" xmlns="http://www.bodz.net/xml/draft/lang/tix" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xaa="http://www.bodz.net/xml/draft/xaa/section-support" elementFormDefault="qualified" attributeFormDefault="unqualified">	<xs:import namespace="http://www.bodz.net/xml/draft/xaa/section-support" schemaLocation="http://www.bodz.net/xml/draft/xaa/section-support.xsd"/>	<xs:element name="tix">		<xs:annotation>			<xs:documentation>Think-infinite XML (see also Tis: Think-infinite script)</xs:documentation>		</xs:annotation>		<xs:complexType>			<xs:complexContent>				<xs:extension base="xaa:section-extendable-base">					<xs:choice minOccurs="0" maxOccurs="unbounded">						<xs:element name="namespace" type="st-namespace"/>					</xs:choice>				</xs:extension>			</xs:complexContent>		</xs:complexType>	</xs:element>	<!--BASE STRUCTURE-->	<xs:complexType name="base-code-unit">		<xs:attribute name="label" type="xs:string" use="optional"/>	</xs:complexType>	<xs:complexType name="base-control">		<xs:complexContent>			<xs:extension base="base-code-unit">				<xs:choice minOccurs="0" maxOccurs="unbounded">					<xs:group ref="stg-control-symbol"/>				</xs:choice>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-expression">		<xs:complexContent>			<xs:extension base="base-code-unit">				<xs:attribute name="rtl" type="xs:integer" use="optional" default="0"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-unary">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand" type="base-operand"/>				</xs:sequence>				<xs:attribute name="operand" type="xs:string" use="optional"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-binary">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand-l" type="base-operand"/>					<xs:element name="operand-r" type="base-operand"/>				</xs:sequence>				<xs:attribute name="operand-l" type="xs:string" use="optional"/>				<xs:attribute name="operand-r" type="xs:string" use="optional"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-ternary">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand-0" type="base-operand"/>					<xs:element name="operand-1" type="base-operand"/>					<xs:element name="operand-2" type="base-operand"/>				</xs:sequence>				<xs:attribute name="operand-0" type="xs:string" use="optional"/>				<xs:attribute name="operand-1" type="xs:string" use="optional"/>				<xs:attribute name="operand-2" type="xs:string" use="optional"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-variable">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand" type="base-operand" maxOccurs="unbounded"/>				</xs:sequence>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operand">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence>					<xs:element name="expression"/>				</xs:sequence>				<xs:attribute name="left-value" type="xs:boolean" use="optional" default="false"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:group name="tix-navigate">		<xs:choice>			<xs:element name="base-expression" type="base-expression"/>			<xs:element name="base-operator-unary">				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-operator-unary"/>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="base-operator-binary" type="base-operator-binary"/>			<xs:element name="base-operator-ternary" type="base-operator-ternary"/>			<xs:element name="base-operator-variable" type="base-operator-variable"/>		</xs:choice>	</xs:group>	<!--STATEMENT GROUPS-->	<xs:group name="stg-any">		<xs:choice>			<xs:group ref="stg-lexical"/>			<xs:group ref="stg-control"/>			<xs:group ref="stg-operator"/>			<xs:group ref="stg-function"/>			<xs:group ref="stg-declare"/>			<xs:group ref="stg-define"/>			<xs:group ref="stg-general"/>		</xs:choice>	</xs:group>	<xs:group name="stg-lexical">		<xs:annotation>			<xs:documentation>namespace</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="namespace" type="st-namespace"/>			<xs:element name="namespace-using" type="xs:string"/>		</xs:choice>	</xs:group>	<xs:group name="stg-control">		<xs:annotation>			<xs:documentation>condition, loop, try-catch, fork</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="iterate">				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-control">							<xs:attribute name="iterator" type="xs:string" use="optional"/>							<xs:attribute name="range" type="xs:string" use="optional"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="branch">				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-control">							<xs:sequence>								<xs:element name="on" minOccurs="0">									<xs:complexType/>								</xs:element>								<xs:element name="do"/>							</xs:sequence>							<xs:attribute name="on" type="xs:string" use="optional"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="branches">				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-control">							<xs:choice>								<xs:element name="branch"/>							</xs:choice>							<xs:attribute name="default" type="xs:string" use="optional"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="loop">				<xs:annotation>					<xs:documentation>infinite-loop if both while and until aren't specified.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-control">							<xs:sequence>								<xs:choice minOccurs="0">									<xs:element name="while"/>									<xs:element name="until"/>								</xs:choice>								<xs:element name="do"/>							</xs:sequence>							<xs:attribute name="while" type="xs:string" use="optional"/>							<xs:attribute name="until" type="xs:string" use="optional"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="fork" type="base-control"/>			<xs:element ref="do"/>		</xs:choice>	</xs:group>	<xs:group name="stg-control-symbol">		<xs:annotation>			<xs:documentation>control do-structure. A do-structure has:     I initialize    S step    C conditionlabel-attribute in control-symbol refers to target-label. </xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="control-goto" type="base-code-unit">				<xs:annotation>					<xs:documentation>unconditionally goto. </xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="control-break" type="base-code-unit">				<xs:annotation>					<xs:documentation>break the do-structure</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="control-next" type="base-code-unit">				<xs:annotation>					<xs:documentation>do the next-step, with C</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="control-previous" type="base-code-unit">				<xs:annotation>					<xs:documentation>do the previous-step, with C</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="control-redo" type="base-code-unit">				<xs:annotation>					<xs:documentation>re-do the current step, without C</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="control-reset" type="base-code-unit">				<xs:annotation>					<xs:documentation>re-do the do-structure, with I-C</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="control-yield" type="base-code-unit">				<xs:annotation>					<xs:documentation>yield the current do-structure, with a returned yield-handle. </xs:documentation>				</xs:annotation>			</xs:element>		</xs:choice>	</xs:group>	<xs:group name="stg-operator">		<xs:annotation>			<xs:documentation>arithmatic, type-cast, ref/deref, etc.</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:group ref="stg-op-bit"/>			<xs:group ref="stg-op-arithmatic"/>			<xs:group ref="stg-op-logic"/>			<xs:group ref="stg-op-datatype"/>			<xs:group ref="stg-op-misc"/>		</xs:choice>	</xs:group>	<xs:group name="stg-op-bit">		<xs:choice>			<xs:element name="bit-not" type="base-operator-unary"/>			<xs:element name="bit-neg" type="base-operator-unary"/>			<xs:element name="bit-and" type="base-operator-binary"/>			<xs:element name="bit-or" type="base-operator-binary"/>			<xs:element name="bit-xor" type="base-operator-binary"/>			<xs:element name="bit-shift">				<xs:annotation>					<xs:documentation>shift: number of levels to shift, positive for right, negtive for left. looped: looped-shiftsigned: don't shift MSB</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-operator-binary">							<xs:attribute name="shift" type="xs:integer" use="required"/>							<xs:attribute name="looped" type="xs:boolean" use="optional" default="false"/>							<xs:attribute name="signed" type="xs:boolean" use="optional" default="false"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="bit-count">				<xs:annotation>					<xs:documentation>character: 0, [1]</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-operator-unary">							<xs:attribute name="character" type="xs:string" use="optional" default="1"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="bit-count-prefix">				<xs:annotation>					<xs:documentation>character: 0, 1from: [left], right</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-operator-unary">							<xs:attribute name="character" type="xs:string" use="optional" default="1"/>							<xs:attribute name="from" type="xs:string" use="optional" default="left"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>		</xs:choice>	</xs:group>	<xs:group name="stg-op-arithmatic">		<xs:choice>			<xs:element name="add" type="base-operator-binary"/>			<xs:element name="subtract" type="base-operator-binary"/>			<xs:element name="multiply" type="base-operator-binary"/>			<xs:element name="divide" type="base-operator-binary"/>			<xs:element name="power" type="base-operator-binary"/>			<xs:element name="increase" type="base-operator-unary"/>			<xs:element name="decrease" type="base-operator-unary"/>		</xs:choice>	</xs:group>	<xs:group name="stg-op-logic">		<xs:choice>			<xs:element name="is-all" type="base-operator-variable">				<xs:annotation>					<xs:documentation>shortcut: take the sequence</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="is-any" type="base-operator-variable">				<xs:annotation>					<xs:documentation>shortcut: take the sequence</xs:documentation>				</xs:annotation>			</xs:element>			<xs:element name="is-only" type="base-operator-variable"/>			<xs:element name="is" type="base-operator-unary"/>			<xs:element name="is-not" type="base-operator-unary"/>			<xs:element name="is-equal" type="base-operator-binary"/>			<xs:element name="is-greater" type="base-operator-binary"/>			<xs:element name="is-less" type="base-operator-binary"/>			<xs:element name="is-greater-or-equal" type="base-operator-binary"/>			<xs:element name="is-less-or-equal" type="base-operator-binary"/>		</xs:choice>	</xs:group>	<xs:group name="stg-op-datatype">		<xs:choice>			<xs:element name="size-of" type="base-operator-unary"/>			<xs:element name="address-of" type="base-operator-unary"/>			<xs:element name="value-at" type="base-operator-unary"/>			<xs:element name="member-of">				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-operator-unary">							<xs:attribute name="select" type="xs:string" use="optional"/>						</xs:extension>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="reinterpret-cast" type="base-operator-unary"/>			<xs:element name="static-cast" type="base-operator-unary"/>			<xs:element name="dynamic-cast" type="base-operator-unary"/>		</xs:choice>	</xs:group>	<xs:group name="stg-op-misc">		<xs:choice>			<xs:element name="iif" type="base-operator-ternary"/>		</xs:choice>	</xs:group>	<xs:group name="stg-function">		<xs:annotation>			<xs:documentation>assignment, function-call</xs:documentation>		</xs:annotation>		<xs:choice/>	</xs:group>	<xs:group name="stg-general">		<xs:annotation>			<xs:documentation>modulization, misc</xs:documentation>		</xs:annotation>		<xs:choice/>	</xs:group>	<xs:group name="stg-declare">		<xs:annotation>			<xs:documentation>typedef, function-proto</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="declare-type"/>			<xs:element name="declare-function"/>			<xs:element name="aa"/>		</xs:choice>	</xs:group>	<xs:group name="stg-define">		<xs:annotation>			<xs:documentation>variable-def, function-def</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="define-variable"/>			<xs:element name="define-function"/>		</xs:choice>	</xs:group>	<!--STATEMENT - LEXICAL-->	<xs:complexType name="st-namespace">		<xs:choice minOccurs="0" maxOccurs="unbounded">			<xs:group ref="stg-any"/>		</xs:choice>		<xs:attribute name="name" type="xs:string" use="optional" default="global"/>	</xs:complexType>	<xs:element name="do">		<xs:complexType>			<xs:complexContent>				<xs:extension base="base-control">					<xs:choice>						<xs:element name="initialize"/>						<xs:element name="previous"/>						<xs:element name="next"/>						<xs:element name="check"/>						<xs:element name="catch"/>						<xs:element name="finalize"/>						<xs:element name="cleanup"/>					</xs:choice>				</xs:extension>			</xs:complexContent>		</xs:complexType>	</xs:element>	<!--STATEMENT - CONTROL-->	<!--STATEMENT - OPERATOR-->	<!--STATEMENT - FUNCTION-->	<!--STATEMENT - GENERAL-->	<!--STATEMENT - DECLARE-->	<!--STATEMENT - DEFINE--></xs:schema>