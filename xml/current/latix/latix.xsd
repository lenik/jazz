<?xml version="1.0" encoding="UTF-8"?><!-- edited with XMLSPY v2004 rel. 3 U (http://www.xmlspy.com) by CPU007 (STUPYNOMAGIC) --><xs:schema targetNamespace="http://www.bodz.net/xml/draft/lang/tix" xmlns="http://www.bodz.net/xml/draft/lang/tix" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xaa="http://www.bodz.net/xml/draft/xaa/section-support" elementFormDefault="qualified" attributeFormDefault="unqualified">	<xs:import namespace="http://www.bodz.net/xml/draft/xaa/section-support" schemaLocation="http://www.bodz.net/xml/draft/xaa/section-support.xsd"/>	<xs:element name="tix">		<xs:annotation>			<xs:documentation>Think-infinite XML (see also Tis: Think-infinite script)</xs:documentation>		</xs:annotation>		<xs:complexType>			<xs:complexContent>				<xs:extension base="xaa:section-extendable-base">					<xs:choice>						<xs:element name="statement" type="statement-type"/>					</xs:choice>				</xs:extension>			</xs:complexContent>		</xs:complexType>	</xs:element>	<xs:attributeGroup name="attributes-statement">		<xs:attribute name="label" type="xs:string" use="optional"/>		<xs:attribute name="rtl" type="xs:integer" use="optional"/>	</xs:attributeGroup>	<xs:complexType name="base-expression">		<xs:attributeGroup ref="attributes-statement"/>	</xs:complexType>	<xs:complexType name="base-operator-unary">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand"/>				</xs:sequence>				<xs:attribute name="operand" type="xs:string" use="optional"/>				<xs:attribute name="assign-lv" type="xs:boolean" use="optional" default="false"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-binary">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand-l"/>					<xs:element name="operand-r"/>				</xs:sequence>				<xs:attribute name="operand-l" type="xs:string" use="optional"/>				<xs:attribute name="operand-r" type="xs:string" use="optional"/>				<xs:attribute name="assign-lv" type="xs:boolean" use="optional" default="false"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-ternary">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand-0"/>					<xs:element name="operand-1"/>					<xs:element name="operand-2"/>				</xs:sequence>				<xs:attribute name="operand-0" type="xs:string" use="optional"/>				<xs:attribute name="operand-1" type="xs:string" use="optional"/>				<xs:attribute name="operand-2" type="xs:string" use="optional"/>				<xs:attribute name="assign-lv" type="xs:boolean" use="optional" default="false"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="base-operator-variable">		<xs:complexContent>			<xs:extension base="base-expression">				<xs:sequence minOccurs="0">					<xs:element name="operand" maxOccurs="unbounded"/>				</xs:sequence>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:group name="tix-navigate">		<xs:choice>			<xs:element name="base-expression" type="base-expression"/>			<xs:element name="base-operator-unary">				<xs:complexType>					<xs:complexContent>						<xs:extension base="base-operator-unary"/>					</xs:complexContent>				</xs:complexType>			</xs:element>			<xs:element name="base-operator-binary" type="base-operator-binary"/>			<xs:element name="base-operator-ternary" type="base-operator-ternary"/>			<xs:element name="base-operator-variable" type="base-operator-variable"/>		</xs:choice>	</xs:group>	<!-- STATEMENT -->	<xs:complexType name="statement-type">		<xs:choice>			<xs:group ref="st-lexical"/>			<xs:group ref="st-control"/>			<xs:group ref="st-operator"/>			<xs:group ref="st-function"/>			<xs:group ref="st-declare"/>			<xs:group ref="st-define"/>			<xs:group ref="st-general"/>		</xs:choice>	</xs:complexType>	<xs:group name="st-lexical">		<xs:annotation>			<xs:documentation>namespace</xs:documentation>		</xs:annotation>		<xs:choice/>	</xs:group>	<xs:group name="st-control">		<xs:annotation>			<xs:documentation>condition, loop, try-catch, fork</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="for"/>			<xs:element name="for-each"/>			<xs:element name="when">				<xs:complexType>					<xs:sequence>						<xs:element name="condition" minOccurs="0"/>						<xs:element name="do"/>					</xs:sequence>					<xs:attribute name="condition" type="xs:string" use="optional"/>				</xs:complexType>			</xs:element>			<xs:element name="when-table"/>			<xs:element name="loop-while"/>			<xs:element name="loop-until"/>			<xs:element name="goto"/>			<xs:element name="fork"/>			<xs:element name="try"/>		</xs:choice>	</xs:group>	<xs:group name="st-operator">		<xs:annotation>			<xs:documentation>arithmatic, type-cast, ref/deref, etc.</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:choice>				<xs:annotation>					<xs:documentation>operators [bit]</xs:documentation>				</xs:annotation>				<xs:element name="bit-not" type="base-operator-unary"/>				<xs:element name="bit-neg" type="base-operator-unary"/>				<xs:element name="bit-and" type="base-operator-binary"/>				<xs:element name="bit-or" type="base-operator-binary"/>				<xs:element name="bit-xor" type="base-operator-binary"/>				<xs:element name="bit-shift">					<xs:annotation>						<xs:documentation>shift: number of levels to shift, positive for right, negtive for left. 

looped: looped-shift

signed: don't shift MSB</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:complexContent>							<xs:extension base="base-operator-binary">								<xs:attribute name="shift" type="xs:integer" use="required"/>								<xs:attribute name="looped" type="xs:boolean" use="optional" default="false"/>								<xs:attribute name="signed" type="xs:boolean" use="optional" default="false"/>							</xs:extension>						</xs:complexContent>					</xs:complexType>				</xs:element>				<xs:element name="bit-count">					<xs:annotation>						<xs:documentation>character: 0, [1]</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:complexContent>							<xs:extension base="base-operator-unary">								<xs:attribute name="character" type="xs:string" use="optional" default="1"/>							</xs:extension>						</xs:complexContent>					</xs:complexType>				</xs:element>				<xs:element name="bit-count-prefix">					<xs:annotation>						<xs:documentation>character: 0, 1

from: [left], right</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:complexContent>							<xs:extension base="base-operator-unary">								<xs:attribute name="character" type="xs:string" use="optional" default="1"/>								<xs:attribute name="from" type="xs:string" use="optional" default="left"/>							</xs:extension>						</xs:complexContent>					</xs:complexType>				</xs:element>			</xs:choice>			<xs:choice>				<xs:annotation>					<xs:documentation>operators [logic]</xs:documentation>				</xs:annotation>				<xs:element name="is-all-of" type="base-operator-variable">					<xs:annotation>						<xs:documentation>shortcut: take the sequence</xs:documentation>					</xs:annotation>				</xs:element>				<xs:element name="is-any-of" type="base-operator-variable">					<xs:annotation>						<xs:documentation>shortcut: take the sequence</xs:documentation>					</xs:annotation>				</xs:element>				<xs:element name="is-only-of" type="base-operator-variable"/>				<xs:element name="is-not" type="base-operator-unary"/>				<xs:element name="is-equal" type="base-operator-binary"/>				<xs:element name="is-greater" type="base-operator-binary"/>				<xs:element name="is-less" type="base-operator-binary"/>				<xs:element name="is-greater-or-equal" type="base-operator-binary"/>				<xs:element name="is-less-or-equal" type="base-operator-binary"/>			</xs:choice>			<xs:choice>				<xs:annotation>					<xs:documentation>operators [alg]</xs:documentation>				</xs:annotation>				<xs:element name="add" type="base-operator-binary"/>				<xs:element name="subtract" type="base-operator-binary"/>				<xs:element name="multiply" type="base-operator-binary"/>				<xs:element name="divide" type="base-operator-binary"/>				<xs:element name="power" type="base-operator-binary"/>				<xs:element name="increase" type="base-operator-unary"/>				<xs:element name="decrease" type="base-operator-unary"/>			</xs:choice>			<xs:choice>				<xs:annotation>					<xs:documentation>operators [misc]</xs:documentation>				</xs:annotation>				<xs:element name="size-of" type="base-operator-unary"/>				<xs:element name="iif" type="base-operator-ternary"/>			</xs:choice>			<xs:choice>				<xs:annotation>					<xs:documentation>operators [type]</xs:documentation>				</xs:annotation>				<xs:element name="auto-cast"/>				<xs:element name="reinterpret-cast" type="base-operator-unary"/>				<xs:element name="static-cast" type="base-operator-unary"/>				<xs:element name="dynamic-cast" type="base-operator-unary"/>				<xs:element name="address-of" type="base-operator-unary"/>				<xs:element name="value-of" type="base-operator-unary"/>				<xs:element name="member-of">					<xs:complexType>						<xs:complexContent>							<xs:extension base="base-operator-unary">								<xs:attribute name="name" type="xs:string" use="optional"/>							</xs:extension>						</xs:complexContent>					</xs:complexType>				</xs:element>			</xs:choice>			<xs:element name="expression" type="base-expression"/>		</xs:choice>	</xs:group>	<xs:group name="st-function">		<xs:annotation>			<xs:documentation>assignment, function-call</xs:documentation>		</xs:annotation>		<xs:choice/>	</xs:group>	<xs:group name="st-general">		<xs:annotation>			<xs:documentation>modulization, misc</xs:documentation>		</xs:annotation>		<xs:choice/>	</xs:group>	<xs:group name="st-declare">		<xs:annotation>			<xs:documentation>typedef, function-proto</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="declare-type"/>			<xs:element name="declare-function"/>			<xs:element name="aa"/>		</xs:choice>	</xs:group>	<xs:group name="st-define">		<xs:annotation>			<xs:documentation>variable-def, function-def</xs:documentation>		</xs:annotation>		<xs:choice>			<xs:element name="define-variable"/>			<xs:element name="define-function"/>		</xs:choice>	</xs:group></xs:schema>