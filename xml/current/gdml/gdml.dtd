<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v2004 rel. 3 U (http://www.xmlspy.com) by CPU007 (STUPYNOMAGIC) -->
<!--DTD generated by XMLSPY v2004 rel. 3 U (http://www.xmlspy.com)-->
<!ELEMENT control EMPTY>
<!ATTLIST control
	command CDATA #REQUIRED
>
<!ELEMENT grammer ((section-embed | section-property)*, (section-import)*, (((element | automata | group)*), resumers?, defininitions*))>
<!ATTLIST grammer
	extends CDATA #IMPLIED
	root IDREF #REQUIRED
	info CDATA #IMPLIED
	word-boundary CDATA #IMPLIED
	case-sensitive CDATA #IMPLIED
>
<!ELEMENT none EMPTY>
<!ATTLIST none
	info CDATA #IMPLIED
>
<!--Fragments appended to this document. predefined fragment as follows: head, tail, declare, define, custom. -->
<!ELEMENT section-embed (#PCDATA)>
<!ATTLIST section-embed
	location CDATA #IMPLIED
>
<!--Import resources. -->
<!ELEMENT section-import (section-parameter*)>
<!ATTLIST section-import
	url CDATA #REQUIRED
>
<!ELEMENT section-parameter (#PCDATA)>
<!ATTLIST section-parameter
	name CDATA #REQUIRED
>
<!--Properties of this section, for example, gdml - a parser generater define use property for: 
- programming language of the implementation
- the algorithm used
etc. -->
<!ELEMENT section-property (#PCDATA)>
<!ATTLIST section-property
	name CDATA #REQUIRED
>
<!ELEMENT element (syntax+, create?)>
<!ATTLIST element
	id ID #REQUIRED
	extends IDREF #IMPLIED
	type CDATA #IMPLIED
	info CDATA #IMPLIED
	assoc (left | right | none) #IMPLIED
	prior CDATA #IMPLIED
>
<!ELEMENT automata (section-embed | state)+>
<!ATTLIST automata
	id CDATA #REQUIRED
	info CDATA #IMPLIED
	start CDATA #REQUIRED
>
<!ELEMENT group ((element | automata | group)*)>
<!ATTLIST group
	info CDATA #IMPLIED
	word-boundary CDATA #IMPLIED
	case-sensitive CDATA #IMPLIED
>
<!ELEMENT resumers (resumer+)>
<!ELEMENT defininitions (for-element*)>
<!ATTLIST defininitions
	key CDATA #IMPLIED
	target CDATA #IMPLIED
	info CDATA #IMPLIED
>
<!ELEMENT syntax ((((look-before?, (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)*, (syntax-determinizer, context?, (syntax-synchronizer | ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)+)?, look-ahead?)) | none | void), (apply | re-insert | comment)*)>
<!ATTLIST syntax
	info CDATA #IMPLIED
	validity CDATA #IMPLIED
	id CDATA #IMPLIED
	behavior (normal | illegal | ambiguous-ext) #IMPLIED
>
<!ELEMENT create (#PCDATA)>
<!ATTLIST create
	language CDATA #IMPLIED
	category CDATA #IMPLIED
	info CDATA #IMPLIED
>
<!ELEMENT state (for-input)+>
<!ATTLIST state
	name CDATA #REQUIRED
	info CDATA #IMPLIED
	type (normal | inclusive | exclusive) #IMPLIED
>
<!ELEMENT resumer (syntax+, create?)>
<!ATTLIST resumer
	id ID #REQUIRED
	extends IDREF #IMPLIED
	type CDATA #IMPLIED
	info CDATA #IMPLIED
	assoc (left | right | none) #IMPLIED
	prior CDATA #IMPLIED
>
<!ELEMENT for-element (#PCDATA)>
<!ATTLIST for-element
	id IDREF #REQUIRED
	key (apply | reduced | shifted) #REQUIRED
	target CDATA #REQUIRED
	info CDATA #IMPLIED
>
<!ELEMENT look-before ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat)))>
<!ELEMENT refer (#PCDATA)>
<!ATTLIST refer
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT text (#PCDATA)>
<!ATTLIST text
	case-sensitive CDATA #IMPLIED
	info CDATA #IMPLIED
	boundary CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT regex (#PCDATA)>
<!ATTLIST regex
	case-sensitive CDATA #IMPLIED
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT binary (#PCDATA)>
<!ATTLIST binary
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT object EMPTY>
<!ELEMENT object-stream ANY>
<!ELEMENT seq (((look-before?, (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)*, (syntax-determinizer, context?, (syntax-synchronizer | ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)+)?, look-ahead?)))>
<!ATTLIST seq
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT anyof (none?, ((look-before?, (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)*, (syntax-determinizer, context?, (syntax-synchronizer | ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)+)?, look-ahead?)))>
<!ATTLIST anyof
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT optional ((look-before?, (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)*, (syntax-determinizer, context?, (syntax-synchronizer | ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)+)?, look-ahead?))>
<!ATTLIST optional
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT repeat (((look-before?, (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)*, (syntax-determinizer, context?, (syntax-synchronizer | ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)+)?, look-ahead?)), delimiter?)>
<!ATTLIST repeat
	min CDATA #IMPLIED
	max CDATA #IMPLIED
	prefer (greedy | lazy) #IMPLIED
	info CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT syntax-determinizer ANY>
<!ELEMENT context (preprocess*, hidden-element*)>
<!ATTLIST context
	info CDATA #IMPLIED
>
<!ELEMENT syntax-synchronizer ANY>
<!ELEMENT look-ahead ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat)))>
<!ELEMENT void EMPTY>
<!ATTLIST void
	info CDATA #IMPLIED
>
<!ELEMENT apply (#PCDATA)>
<!ATTLIST apply
	language CDATA #IMPLIED
	category CDATA #IMPLIED
	info CDATA #IMPLIED
>
<!ELEMENT re-insert (as-text | as-binary | as-item)+>
<!ATTLIST re-insert
	class CDATA #IMPLIED
	info CDATA #IMPLIED
>
<!ELEMENT comment (#PCDATA)>
<!ELEMENT for-input (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))), action)>
<!ATTLIST for-input
	info CDATA #IMPLIED
>
<!ELEMENT delimiter (((look-before?, (((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)*, (syntax-determinizer, context?, (syntax-synchronizer | ((refer | ((text | regex) | (binary) | (object | object-stream)) | (seq | anyof | optional | repeat))) | control)+)?, look-ahead?)) | none | void)>
<!ATTLIST delimiter
	info CDATA #IMPLIED
	validity CDATA #IMPLIED
	name CDATA #IMPLIED
	re-prior CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT preprocess (section-embed | state)+>
<!ATTLIST preprocess
	id CDATA #REQUIRED
	info CDATA #IMPLIED
	start CDATA #REQUIRED
>
<!ELEMENT hidden-element (syntax+, create?)>
<!ATTLIST hidden-element
	id ID #REQUIRED
	extends IDREF #IMPLIED
	type CDATA #IMPLIED
	info CDATA #IMPLIED
	assoc (left | right | none) #IMPLIED
	prior CDATA #IMPLIED
>
<!ELEMENT as-text (#PCDATA)>
<!ELEMENT as-binary (#PCDATA)>
<!ELEMENT as-item EMPTY>
<!ATTLIST as-item
	id CDATA #REQUIRED
>
<!ELEMENT action (evaluate | output-text | output-element | goto | reject)*>
<!ATTLIST action
	info CDATA #IMPLIED
>
<!ELEMENT evaluate (#PCDATA)>
<!ATTLIST evaluate
	language CDATA #IMPLIED
	category CDATA #IMPLIED
	info CDATA #IMPLIED
>
<!ELEMENT output-text (#PCDATA)>
<!ATTLIST output-text
	language CDATA #IMPLIED
	category CDATA #IMPLIED
	info CDATA #IMPLIED
	source CDATA #IMPLIED
>
<!ELEMENT output-element (#PCDATA)>
<!ATTLIST output-element
	language CDATA #IMPLIED
	category CDATA #IMPLIED
	info CDATA #IMPLIED
	id IDREF #REQUIRED
	target CDATA #IMPLIED
>
<!ELEMENT goto EMPTY>
<!ATTLIST goto
	state CDATA #REQUIRED
>
<!ELEMENT reject EMPTY>
<!ATTLIST reject
	replace CDATA #IMPLIED
>
