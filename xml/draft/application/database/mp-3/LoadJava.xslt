<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:fo="http://www.w3.org/1999/XSL/Format"
xmlns:xalan="http://xml.apache.org/xalan"
xmlns:xslapi="xalan://freejava.xml.xsl.SimpleXsltApi"
xmlns:LXU="xalan://freejava.data.doa.compiler.LoadXsltUtilities"
xmlns:redirect="http://xml.apache.org/xalan/redirect"
extension-element-prefixes="xslapi LXU redirect"
>
	<xsl:param name="outputdir" select="."/>
	
	<xsl:variable name="COL_WIDTH" select="32"/>

	<xalan:component prefix="xslapi">
		<xalan:script lang="javaclass" src="xalan://freejava.xml.xsl.SimpleXsltApi"/>
	</xalan:component>
	
	<xalan:component prefix="LXU">
		<xalan:script lang="javaclass" src="xalan://freejava.data.doa.compiler.LoadXsltUtilities"/>
	</xalan:component>
	
	<xsl:output encoding="utf-8" version="1.0" method="text" indent="no"/>
	
	<xsl:template name="t_load" match="/load">
		<xsl:if test="@lang != 'java'">
			<LXU:exception type="lix" select="Illegal lang specified!"/>
		</xsl:if>
		<xsl:if test="number(@version) > '1.02'">
			<LXU:exception type="lix" select="Version not supported!"/>
		</xsl:if>
		
		<xsl:apply-templates select="accessor"/>
	</xsl:template>
	
	<!--
		_______________ The main class of the accessor  _________________
		_________________________________________________________________
	-->
	<xsl:template name="t_accessor" match="accessor"
		><xsl:variable name="path" select="LXU:iif(@extension, concat(@name, @extension), concat(@name, '.java'))"
		/><xsl:variable name="type" select="LXU:iif(table, 'table', LXU:iif(query, 'query', '--invalid--'))"
		/><xsl:if test="$type='--invalid--'"
			><LXU:exception type="lix" select="Cannot specify both table and query elements. "
			/></xsl:if
		><xsl:variable name="kernel"><xsl:value-of select="./*[name(.)=$type]"/></xsl:variable
		><xsl:variable name="super" select="LXU:ie_sys(concat('inherits.', $type), @inherits)"
		/><xsl:value-of select="LXU:initDoasp(@doasp)"
		/><redirect:write select="$path">
/**
 * DOA - Data object accessor
 * 
 * -- This file is generated by LoadJava stylesheet --
 * Please don't edit this file, edit the following LOAD file: 
 * 		source.doa
 * 
 * Powered by FreeJava
 * Powered by XML Technology
 * Powered by <xsl:value-of select="LXU:ie_sys('toolkit.tip', @toolkit)"/>
 */
package <xsl:value-of select="LXU:ie_sys('package', @package)"/>; 

import java.io.*; 
import java.util.*; 
import java.sql.*; 
import freejava.lang.*; 
import freejava.lang.jexp.*; 
import freejava.alc.*; 
import freejava.io.*; 
import freejava.arch.*; 
import freejava.util.*; 
import freejava.data.*; 
import freejava.data.doa.*; 
<xsl:value-of select="header" disable-output-escaping="yes"/>

/**
 * LOAD SECTION
 * Accessor <xsl:value-of select="@name"/>: <xsl:value-of select="$kernel"/>
 *      <xsl:value-of select="LXU:ie_sys('description', @description)" disable-output-escaping="yes"/>
 * <xsl:if test="tip">
 * <xsl:value-of select="tip" disable-output-escaping="yes"/></xsl:if>
 * Version:     <xsl:value-of select="LXU:ie_sys('docversion', @docversion)" disable-output-escaping="yes"/>
 * Author:      <xsl:value-of select="LXU:ie_sys('author', @author)" disable-output-escaping="yes"/>
 * Company:     <xsl:value-of select="LXU:ie_sys('company', @company)" disable-output-escaping="yes"/>
 * Copyright:   <xsl:value-of select="LXU:ie_sys('copyright', @copyright)" disable-output-escaping="yes"/>
 * E-mail:      <xsl:value-of select="LXU:ie_sys('email', @email)" disable-output-escaping="yes"/>
 * 
 * @see:        <xsl:value-of select="$super"/>
 */
public class <xsl:value-of select="@name"/> extends <xsl:value-of select="$super"/> {
	public class Lix extends DoaAccessor.Lix {
		public Lix() { super(); }
		public Lix(String message) { super(message); }
		public Lix(Throwable cause) { super(cause); }
		public Lix(String message, Throwable cause) { super(message, cause); }
	}
	public class _Lix extends DoaAccessor._Lix {
		public _Lix() { super(); }
		public _Lix(String message) { super(message); }
		public _Lix(Throwable cause) { super(cause); }
		public _Lix(String message, Throwable cause) { super(message, cause); }
	}
		
		<xsl:if test="$type='table'"><xsl:call-template name="t_table"/></xsl:if>
		<xsl:if test="$type='query'"><xsl:call-template name="t_query"/></xsl:if>
		
		<xsl:for-each select="field">
			<xsl:call-template name="t_field_access"/>
		</xsl:for-each>
		
		<xsl:if test="operate">
			<xsl:for-each select="operate/*[name(.) != 'comment' and name(.) != 'lang']">
				<xsl:call-template name="t_an_operation"/>
			</xsl:for-each>
		</xsl:if>
		
		<xsl:value-of select="definition" disable-output-escaping="yes"/>
		<!--
			_______________ Misc definitions  _________________
				names
				runtime-support
				service-provider
				constants
			___________________________________________________
		-->

		<xsl:for-each select="table">
			<xsl:call-template name="t_table_def"/>
		</xsl:for-each>
		<xsl:for-each select="query">
			<xsl:call-template name="t_query_def"/>
		</xsl:for-each>

		<xsl:if test="../@toolkit">
	public String sysRuntimeVersion() {
		return "<xsl:value-of select="../@toolkit" disable-output-escaping="yes"/>"; 
	}
		</xsl:if><xsl:if test="@doasp">
	public String sysDoaspVersion() {
		return "<xsl:value-of select="@doasp" disable-output-escaping="yes"/>"; 
	}
		</xsl:if><xsl:if test="@clientClass">
	public String sysClientClass() {
		return "<xsl:value-of select="@clientClass" disable-output-escaping="yes"/>"; 
	}
		</xsl:if><xsl:if test="@client">
	public String sysClientURI() {
		return "<xsl:value-of select="@client" disable-output-escaping="yes"/>"; 
	}
		</xsl:if>
		<xsl:call-template name="t_field_def_init"/>
		<xsl:for-each select="field" xml:space="preserve"
			><xsl:variable name="impName" select="LXU:ie_2(lang/name, name)"
			/>
	static int COLUMN_<xsl:value-of select="LXU:left($impName, $COL_WIDTH)"/>= <xsl:number/>; <!-- not initialized, yet 
		--></xsl:for-each>
	static boolean _COLUMN<xsl:value-of select="LXU:left('_initialized', $COL_WIDTH - 4)"
		/>= <xsl:value-of select="LXU:iif(@sequenced='true', 'true', 'false')"/>; <!-- initialize only once, for all instances. -->
}
		<xsl:value-of select="footer" disable-output-escaping="yes"/>
		</redirect:write>
	</xsl:template>
	
	<xsl:template name="t_an_operation" xml:space="preserve"
		><xsl:variable name="nameOfThis" select="name(.)"
		/>
	/**
	 * <xsl:value-of select="LXU:upper($nameOfThis)"/> OPERATION<xsl:if test="../comment">
	 * <xsl:value-of select="../comment" disable-output-escaping="yes"/></xsl:if>
	 */
	<xsl:call-template name="t_visibility_lang"/> void <xsl:value-of select="$nameOfThis"/>() throws Lix {
		<xsl:choose>
			<xsl:when test="../lang/node()[name()=$nameOfThis]"><xsl:value-of select="../lang/node()[name()=$nameOfThis]" disable-output-escaping="yes"/></xsl:when>
			<xsl:otherwise>sqlctx.execute("<xsl:value-of select="xslapi:escapeJavaString(.)" disable-output-escaping="yes"/>"); </xsl:otherwise>
		</xsl:choose>
	}
	</xsl:template>
	
	<xsl:template name="t_table"></xsl:template>
	<xsl:template name="t_query"></xsl:template>

	<xsl:template name="t_table_def">
	public String getTableName() {
		return "<xsl:value-of select="."/>"; 
	}
	public String getQueryString() {
		<xsl:choose>
			<xsl:when test="../@selectEntireTable='true'">return "SELECT * FROM <xsl:value-of select="."/>"; </xsl:when>
			<xsl:otherwise
				>return "SELECT <xsl:for-each select="../field"
					><xsl:if test="position() != 1">,</xsl:if
					>[<xsl:value-of select="name"/>]</xsl:for-each
				> FROM <xsl:value-of select="."/>"; </xsl:otherwise
			>
		</xsl:choose>
	}
	</xsl:template>
	<xsl:template name="t_query_def">
	public String getQueryString() {
		return "<xsl:value-of select="."/>"; 
	}
	</xsl:template>
	
	<xsl:template name="t_field_def_init" xml:space="preserve">
	protected void _initialize_COLUMNs() throws Lix {
		try {
			Map n2i = sysGetColumnIndexes(); 
			<xsl:for-each select="field"
				><xsl:variable name="impName" select="LXU:ie_2(lang/name, name)"
				/>
			COLUMN_<xsl:value-of select="LXU:left($impName, $COL_WIDTH)"/>= ((Integer)n2i.get("<xsl:value-of select="name"/>")).intValue(); <!--
			--></xsl:for-each>
		} catch (NullPointerException npe) {
			throw new Lix(Err.GET_COLUMN_ID); 
		}
		_COLUMN_initialized = true; 
	}
	</xsl:template>

	<!--
		___________ The kernel template: accessor for one field ______________
		
			getFIELD: 	get the field value
			setFIELD: 	set the field value
		______________________________________________________________________
	-->
	<xsl:template name="t_field_access" xml:space="preserve"
		><xsl:variable name="impType" select="LXU:className(type, lang/type)"
		/><xsl:variable name="impName" select="LXU:ie_2(lang/name, name)"
		/><xsl:variable name="impGetMethod" select="LXU:iif(lang/name, concat('get', $impName), LXU:interCap('get', $impName))"
		/><xsl:variable name="impSetMethod" select="LXU:iif(lang/name, concat('set', $impName), LXU:interCap('set', $impName))"
		/><xsl:variable name="isReadOnly" select="
			LXU:iif(lang/@readonly, 
				lang/@readonly, 
				LXU:iif(../@readonly, 
					../@readonly, 
					LXU:iif(../table, 
						'false', 
						'true'
					)
				)
			)"
		/><xsl:variable name="fieldComments">
	/**
	 * FIELD: <xsl:value-of select="name"/> <xsl:value-of select="type"/> <xsl:value-of select="props"/> <xsl:if test="$isReadOnly='true'">(read-only)</xsl:if>
	 * <xsl:value-of select="tip"/> <xsl:if test="comments">: <xsl:value-of select="comments"/></xsl:if>
	 */</xsl:variable>
	<xsl:copy-of select="$fieldComments"/>
	<xsl:call-template name="t_visibility_lang"/> <xsl:value-of select="$impType"/> <xsl:value-of select="$impGetMethod"/>() throws Lix {
		Object val; 
		if (isFieldAvailable(columnId)) return field_xxx; 
		try {
			val = current.getObject(columnId_<xsl:value-of select="$impName"/>); 
			setFieldAvailable(columnId); 
			if (val == null) return <xsl:value-of select="LXU:castToPrimaries($impType, 'null')"/>; 
		} catch (SQLException sqle) {
			throw new Lix(sqle); 
		}
		return <xsl:value-of select="LXU:castToPrimaries($impType, 'val')"/>; 
	}
	<xsl:if test="$isReadOnly='false'"><xsl:copy-of select="$fieldComments"/>
	<xsl:call-template name="t_visibility_lang"/> <xsl:value-of select="$impType"/> <xsl:value-of 	select="$impSetMethod"/>(<xsl:value-of select="$impType"/> value) throws Lix {
		try {
			field_xxx = value; 
			if (field_triggers.length > 0) {
				if (!triggers[i].trig(field)) return; 
			}
			if (autoUpdate) {
				if (resultSetUpdatable) {
					current.updateObject(columnId, value); 
				} else {
					statement.update(generateUpdateStatement()); 
				}
			}
			fieldChanged(); 
		} catch (SQLException sqle) {
			throw new Lix(sqle); 
		}
	}
	</xsl:if>
	</xsl:template>
	<!-- end of accessor to field (t_field_access) -->
	
	<xsl:template name="t_visibility_lang">
		<xsl:choose>
			<xsl:when test="lang">
				<xsl:for-each select="lang">
					<xsl:call-template name="t_visibility"/>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise>public</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template name="t_visibility">
		<xsl:choose>
			<xsl:when test="not(@visibility)">public</xsl:when>
			<xsl:when test="@visibility='public'">public</xsl:when>
			<xsl:when test="@visibility='protected'">protected</xsl:when>
			<xsl:when test="@visibility='private'">private</xsl:when>
			<xsl:when test="@visibility='not-specified'"></xsl:when>
			<xsl:otherwise><LXU:exception type='lix' select='invalid visibility specified!'/></xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
