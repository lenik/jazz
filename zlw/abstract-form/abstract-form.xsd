<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:af="http://www.bodz.net/xml/zlw/abstract-form" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.bodz.net/xml/zlw/abstract-form" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="abstract-form">
		<xs:annotation>
			<xs:documentation>ZLW::
abstract-form</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="version" minOccurs="0"/>
				<xs:element ref="af:section" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="section" type="af:section-type"/>
	<xs:complexType name="section-type">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:group ref="af:data-group"/>
			<xs:element ref="af:error"/>
			<xs:element name="form" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:choice maxOccurs="unbounded">
						<xs:group ref="af:input-group"/>
						<xs:any namespace="##other" processContents="lax">
							<xs:annotation>
								<xs:documentation>display elements in different applications</xs:documentation>
							</xs:annotation>
						</xs:any>
					</xs:choice>
					<xs:attribute name="form-method" type="xs:string">
						<xs:annotation>
							<xs:documentation>preferred-method, default post for html-view</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="_section" type="af:section-type">
				<xs:annotation>
					<xs:documentation>RECURSIVE SECTIONS ARE NOT SUPPORTED YET. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="hint" type="xs:string">
			<xs:annotation>
				<xs:documentation>hint-base</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="scalar">
		<xs:complexType mixed="true">
			<xs:sequence>
				<xs:element ref="af:method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="list">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="af:method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element name="item" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType mixed="true">
						<xs:sequence>
							<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
			<xs:attribute name="sort" type="xs:boolean"/>
			<xs:attribute name="sort-order" default="ascending">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="default"/>
						<xs:enumeration value="ascending"/>
						<xs:enumeration value="descending"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="map">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="af:method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element name="entry" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType mixed="true">
						<xs:sequence>
							<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="key" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
			<xs:attribute name="sort">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="none"/>
						<xs:enumeration value="key"/>
						<xs:enumeration value="value"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="sort-order" default="ascending">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="default"/>
						<xs:enumeration value="ascending"/>
						<xs:enumeration value="descending"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="table">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="af:method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element name="column" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="name" type="xs:NMTOKEN" use="required">
							<xs:annotation>
								<xs:documentation>tag-name</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="primary-key" type="xs:boolean"/>
						<xs:attribute name="sort-priority" type="xs:integer"/>
						<xs:attribute name="sort-order">
							<xs:simpleType>
								<xs:restriction base="xs:token">
									<xs:enumeration value="default"/>
									<xs:enumeration value="ascending"/>
									<xs:enumeration value="descending"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="row" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:any namespace="##other" processContents="lax" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="user">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="af:method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="error">
		<xs:complexType mixed="true">
			<xs:sequence>
				<xs:element ref="af:method" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
			<xs:attribute name="source" type="xs:string"/>
			<xs:attribute name="code" type="xs:string"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="input">
		<xs:complexType>
			<xs:sequence>
				<xs:group ref="af:constraint-group" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
			<xs:attribute name="init" type="xs:string"/>
			<xs:attribute name="multiline" type="xs:boolean"/>
			<xs:attribute name="read-only" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>hidden input. </xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="selector">
		<xs:complexType>
			<xs:sequence>
				<xs:annotation>
					<xs:documentation>constraints are not available yet. </xs:documentation>
				</xs:annotation>
				<xs:choice>
					<xs:element name="list-ref" type="xs:string"/>
					<xs:element name="map-ref" type="xs:string"/>
					<xs:element name="table-ref" type="xs:string"/>
					<xs:element ref="af:list"/>
					<xs:element ref="af:map"/>
					<xs:element ref="af:table"/>
				</xs:choice>
			</xs:sequence>
			<xs:attributeGroup ref="af:data-attribute-group"/>
			<xs:attribute name="multiple" type="xs:boolean"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="method">
		<xs:complexType>
			<xs:attributeGroup ref="af:data-attribute-group"/>
			<xs:attribute name="hint" type="xs:string">
				<xs:annotation>
					<xs:documentation>For web-app, hint may be an href.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:group name="data-group">
		<xs:choice>
			<xs:element ref="af:scalar"/>
			<xs:element ref="af:list"/>
			<xs:element ref="af:map"/>
			<xs:element ref="af:table"/>
			<xs:element ref="af:user"/>
		</xs:choice>
	</xs:group>
	<xs:attributeGroup name="data-attribute-group">
		<xs:attribute name="name" type="xs:string" use="optional"/>
		<xs:attribute name="type" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>applicable type, default text

for input-group, type-constraint will applied on request values; 

for output-group, type-specific render will applied on the data. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hold" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>control the lifetime of data, default local</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:group name="input-group">
		<xs:choice>
			<xs:element ref="af:input"/>
			<xs:element ref="af:selector"/>
			<xs:element ref="af:method"/>
			<xs:element name="callback">
				<xs:annotation>
					<xs:documentation>NOT USED.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="xpointer" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:group name="constraint-group">
		<xs:choice>
			<xs:element name="and">
				<xs:complexType>
					<xs:choice maxOccurs="unbounded">
						<xs:group ref="af:constraint-group"/>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="or">
				<xs:complexType>
					<xs:choice maxOccurs="unbounded">
						<xs:group ref="af:constraint-group"/>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="xor">
				<xs:complexType>
					<xs:choice maxOccurs="unbounded">
						<xs:group ref="af:constraint-group"/>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="not">
				<xs:complexType>
					<xs:choice>
						<xs:group ref="af:constraint-group"/>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="pattern">
				<xs:complexType>
					<xs:attribute name="regex" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>standard regular-expression</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="case-insensitive" type="xs:boolean"/>
					<xs:attribute name="dot-all" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>\n, \r are matched by dot(.)</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="multiline" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>^ $ match each lines. </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="comment" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>space are ignored</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="range">
				<xs:annotation>
					<xs:documentation>for number, range constraints the the value boundary; 

for text, range constraints the text-length. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="min" type="xs:decimal">
						<xs:annotation>
							<xs:documentation>-Inf if not specified</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="min-excluded" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>exclude the min boundary</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="max" type="xs:decimal">
						<xs:annotation>
							<xs:documentation>+Inf if not specified</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="max-excluded" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>exclude the max boundary</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:complexType name="constraint-type">
		<xs:annotation>
			<xs:documentation>The complex-type is not used</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:group ref="af:constraint-group"/>
		</xs:choice>
	</xs:complexType>
</xs:schema>
