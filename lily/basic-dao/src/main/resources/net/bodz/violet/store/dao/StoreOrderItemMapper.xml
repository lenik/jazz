<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.violet.store.dao.StoreOrderItemMapper">

    <resultMap id="objlist_map" type="net.bodz.violet.store.StoreOrderItem">
        <id property="id" column="id" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="beginTime" column="t0" />
        <result property="endTime" column="t1" />
        <result property="year" column="year" />
        <result property="batch.jsonStr" column="batch" />
        <result property="serial" column="serial" />
        <result property="expire" column="expire" />
        <result property="quantity" column="qty" />
        <result property="price" column="price" />
        <result property="amount" column="amount" />
        <result property="notes" column="notes" />
        <result property="orderId" column="odr" />
        <result property="artifactId" column="art" />
        <result property="regionId" column="region" />
        <association property="artifact" columnPrefix="art_"
            javaType="net.bodz.violet.art.Artifact" 
            resultMap="net.bodz.violet.art.dao.ArtifactMapper.objlist_map" />
        <association property="order" columnPrefix="odr_"
            javaType="net.bodz.violet.store.StoreOrder" 
            resultMap="net.bodz.violet.store.dao.StoreOrderMapper.objlist_map" />
        <association property="region" columnPrefix="region_"
            javaType="net.bodz.violet.store.Region" 
            resultMap="net.bodz.violet.store.dao.RegionMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.priority, 
            a.flags, 
            a."state", 
            a.t0, 
            a.t1, 
            a."year", 
            a.odr, 
            a.art, 
            a.region, 
            a.batch, 
            a.serial, 
            a.expire, 
            a.qty, 
            a.price, 
            a.amount, 
            a.notes, 
            art.id art_id, 
            art.sku art_sku, 
            art.barcode art_barcode, 
            art.rfid art_rfid, 
            art.uid art_uid, 
            art.gid art_gid, 
            art.mode art_mode, 
            art.acl art_acl, 
            art.label art_label, 
            art.description art_description, 
            art.priority art_priority, 
            art.flags art_flags, 
            art."state" art_state, 
            art.creation art_creation, 
            art.lastmod art_lastmod, 
            art."version" art_version, 
            art.model art_model, 
            art.proto art_proto, 
            art.cat art_cat, 
            art.phase art_phase, 
            art.uom art_uom, 
            art.props art_props, 
            art.finish art_finish, 
            art.price art_price, 
            odr.id odr_id, 
            odr.uid odr_uid, 
            odr.gid odr_gid, 
            odr.mode odr_mode, 
            odr.acl odr_acl, 
            odr.priority odr_priority, 
            odr.flags odr_flags, 
            odr."state" odr_state, 
            odr.creation odr_creation, 
            odr.lastmod odr_lastmod, 
            odr."version" odr_version, 
            odr.t0 odr_t0, 
            odr.t1 odr_t1, 
            odr."year" odr_year, 
            odr.subject odr_subject, 
            odr.op odr_op, 
            odr.text odr_text, 
            odr.form odr_form, 
            odr.formargs odr_formargs, 
            odr.cat odr_cat, 
            odr.phase odr_phase, 
            odr.prev odr_prev, 
            odr.plan odr_plan, 
            odr.org odr_org, 
            odr.ou odr_ou, 
            odr.person odr_person, 
            odr."length" odr_length, 
            odr.sum_qty odr_sum_qty, 
            odr.sum_amount odr_sum_amount, 
            region.id region_id, 
            region.code region_code, 
            region.uid region_uid, 
            region.gid region_gid, 
            region.mode region_mode, 
            region.acl region_acl, 
            region.label region_label, 
            region.description region_description, 
            region.priority region_priority, 
            region.flags region_flags, 
            region."state" region_state, 
            region.creation region_creation, 
            region.lastmod region_lastmod, 
            region."version" region_version, 
            region.props region_props, 
            region."path" region_path, 
            region.proto region_proto, 
            region.parent region_parent, 
            region."depth" region_depth, 
            region.height region_height, 
            region."level" region_level, 
            region.cat region_cat, 
            region.tag region_tag, 
            region.x region_x, 
            region.y region_y, 
            region.z region_z, 
            region.dx region_dx, 
            region.dy region_dy, 
            region.dz region_dz, 
            region.material region_material, 
            region.for_cat region_for_cat, 
            region.for_art region_for_art, 
            region.art region_art
        from storeodrl a
            left join art art on a.art = art.id
            left join storeodr odr on a.odr = odr.id
            left join region region on a.region = region.id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.priority, 
            a.flags, 
            a."state", 
            a.t0, 
            a.t1, 
            a."year", 
            a.odr, 
            a.art, 
            a.region, 
            a.batch, 
            a.serial, 
            a.expire, 
            a.qty, 
            a.price, 
            a.amount, 
            a.notes, 
            art.id art_id, 
            art.sku art_sku, 
            art.barcode art_barcode, 
            art.rfid art_rfid, 
            art.uid art_uid, 
            art.gid art_gid, 
            art.mode art_mode, 
            art.acl art_acl, 
            art.label art_label, 
            art.description art_description, 
            art.priority art_priority, 
            art.flags art_flags, 
            art."state" art_state, 
            art.creation art_creation, 
            art.lastmod art_lastmod, 
            art."version" art_version, 
            art.model art_model, 
            art.proto art_proto, 
            art.cat art_cat, 
            art.phase art_phase, 
            art.uom art_uom, 
            art.props art_props, 
            art.finish art_finish, 
            art.price art_price, 
            odr.id odr_id, 
            odr.uid odr_uid, 
            odr.gid odr_gid, 
            odr.mode odr_mode, 
            odr.acl odr_acl, 
            odr.priority odr_priority, 
            odr.flags odr_flags, 
            odr."state" odr_state, 
            odr.creation odr_creation, 
            odr.lastmod odr_lastmod, 
            odr."version" odr_version, 
            odr.t0 odr_t0, 
            odr.t1 odr_t1, 
            odr."year" odr_year, 
            odr.subject odr_subject, 
            odr.op odr_op, 
            odr.text odr_text, 
            odr.form odr_form, 
            odr.formargs odr_formargs, 
            odr.cat odr_cat, 
            odr.phase odr_phase, 
            odr.prev odr_prev, 
            odr.plan odr_plan, 
            odr.org odr_org, 
            odr.ou odr_ou, 
            odr.person odr_person, 
            odr."length" odr_length, 
            odr.sum_qty odr_sum_qty, 
            odr.sum_amount odr_sum_amount, 
            region.id region_id, 
            region.code region_code, 
            region.uid region_uid, 
            region.gid region_gid, 
            region.mode region_mode, 
            region.acl region_acl, 
            region.label region_label, 
            region.description region_description, 
            region.priority region_priority, 
            region.flags region_flags, 
            region."state" region_state, 
            region.creation region_creation, 
            region.lastmod region_lastmod, 
            region."version" region_version, 
            region.props region_props, 
            region."path" region_path, 
            region.proto region_proto, 
            region.parent region_parent, 
            region."depth" region_depth, 
            region.height region_height, 
            region."level" region_level, 
            region.cat region_cat, 
            region.tag region_tag, 
            region.x region_x, 
            region.y region_y, 
            region.z region_z, 
            region.dx region_dx, 
            region.dy region_dy, 
            region.dz region_dz, 
            region.material region_material, 
            region.for_cat region_for_cat, 
            region.for_art region_for_art, 
            region.art region_art
        from storeodrl a
            left join art art on a.art = art.id
            left join storeodr odr on a.odr = odr.id
            left join region region on a.region = region.id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.beginTime != null">and a.t0 = #{m.beginTime}</if>
        <if test="m.endTime != null">and a.t1 = #{m.endTime}</if>
        <if test="m.year != null">and a."year" = #{m.year}</if>
        <if test="m.yearRange!= null">
            <if test="m.yearRange.hasStartIncl">and a."year" >= #{m.yearRange.start}</if>
            <if test="m.yearRange.hasStartExcl">and a."year" > #{m.yearRange.start}</if>
            <if test="m.yearRange.hasEndIncl">and a."year" &lt;= #{m.yearRange.end}</if>
            <if test="m.yearRange.hasEndExcl">and a."year" &lt; #{m.yearRange.end}</if>
        </if>
        <if test="m.orderId != null">and a.odr = #{m.orderId}</if>
        <if test="m.orderIdRange!= null">
            <if test="m.orderIdRange.hasStartIncl">and a.odr >= #{m.orderIdRange.start}</if>
            <if test="m.orderIdRange.hasStartExcl">and a.odr > #{m.orderIdRange.start}</if>
            <if test="m.orderIdRange.hasEndIncl">and a.odr &lt;= #{m.orderIdRange.end}</if>
            <if test="m.orderIdRange.hasEndExcl">and a.odr &lt; #{m.orderIdRange.end}</if>
        </if>
        <if test="m.artifactId != null">and a.art = #{m.artifactId}</if>
        <if test="m.artifactIdRange!= null">
            <if test="m.artifactIdRange.hasStartIncl">and a.art >= #{m.artifactIdRange.start}</if>
            <if test="m.artifactIdRange.hasStartExcl">and a.art > #{m.artifactIdRange.start}</if>
            <if test="m.artifactIdRange.hasEndIncl">and a.art &lt;= #{m.artifactIdRange.end}</if>
            <if test="m.artifactIdRange.hasEndExcl">and a.art &lt; #{m.artifactIdRange.end}</if>
        </if>
        <if test="m.regionId != null">and a.region = #{m.regionId}</if>
        <if test="m.regionIdRange!= null">
            <if test="m.regionIdRange.hasStartIncl">and a.region >= #{m.regionIdRange.start}</if>
            <if test="m.regionIdRange.hasStartExcl">and a.region > #{m.regionIdRange.start}</if>
            <if test="m.regionIdRange.hasEndIncl">and a.region &lt;= #{m.regionIdRange.end}</if>
            <if test="m.regionIdRange.hasEndExcl">and a.region &lt; #{m.regionIdRange.end}</if>
        </if>
        <if test="m.batch != null">and a.batch = #{m.batch}</if>
        <if test="m.serial != null">and a.serial = #{m.serial}</if>
        <if test="m.serialRange!= null">
            <if test="m.serialRange.hasStartIncl">and a.serial >= #{m.serialRange.start}</if>
            <if test="m.serialRange.hasStartExcl">and a.serial > #{m.serialRange.start}</if>
            <if test="m.serialRange.hasEndIncl">and a.serial &lt;= #{m.serialRange.end}</if>
            <if test="m.serialRange.hasEndExcl">and a.serial &lt; #{m.serialRange.end}</if>
        </if>
        <if test="m.expire != null">and a.expire = #{m.expire}</if>
        <if test="m.quantity != null">and a.qty = #{m.quantity}</if>
        <if test="m.quantityRange!= null">
            <if test="m.quantityRange.hasStartIncl">and a.qty >= #{m.quantityRange.start}</if>
            <if test="m.quantityRange.hasStartExcl">and a.qty > #{m.quantityRange.start}</if>
            <if test="m.quantityRange.hasEndIncl">and a.qty &lt;= #{m.quantityRange.end}</if>
            <if test="m.quantityRange.hasEndExcl">and a.qty &lt; #{m.quantityRange.end}</if>
        </if>
        <if test="m.price != null">and a.price = #{m.price}</if>
        <if test="m.priceRange!= null">
            <if test="m.priceRange.hasStartIncl">and a.price >= #{m.priceRange.start}</if>
            <if test="m.priceRange.hasStartExcl">and a.price > #{m.priceRange.start}</if>
            <if test="m.priceRange.hasEndIncl">and a.price &lt;= #{m.priceRange.end}</if>
            <if test="m.priceRange.hasEndExcl">and a.price &lt; #{m.priceRange.end}</if>
        </if>
        <if test="m.amount != null">and a.amount = #{m.amount}</if>
        <if test="m.amountRange!= null">
            <if test="m.amountRange.hasStartIncl">and a.amount >= #{m.amountRange.start}</if>
            <if test="m.amountRange.hasStartExcl">and a.amount > #{m.amountRange.start}</if>
            <if test="m.amountRange.hasEndIncl">and a.amount &lt;= #{m.amountRange.end}</if>
            <if test="m.amountRange.hasEndExcl">and a.amount &lt; #{m.amountRange.end}</if>
        </if>
        <if test="m.notes != null">and a.notes = #{m.notes}</if>
        <if test="m.notesPattern != null">and a.notes like '${m.notesPattern}'</if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into storeodrl(
            priority,
            flags,
            "state",
            t0,
            t1,
            "year",
            odr,
            art,
            region,
            batch,
            serial,
            expire,
            qty,
            price,
            amount,
            notes
        ) values(
            #{priority},
            #{flags},
            #{state},
            #{beginTime},
            #{endTime},
            #{year},
            #{orderId},
            #{artifactId},
            #{regionId},
            #{batch.jsonStr}::jsonb,
            #{serial},
            #{expire},
            #{quantity},
            #{price},
            #{amount},
            #{notes}
        );
    ]]></insert>

    <update id="update">
        update storeodrl
        <set>
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            t0 = #{beginTime},
            t1 = #{endTime},
            "year" = #{year},
            odr = #{orderId},
            art = #{artifactId},
            region = #{regionId},
            batch = #{batch.jsonStr}::jsonb,
            serial = #{serial},
            expire = #{expire},
            qty = #{quantity},
            price = #{price},
            amount = #{amount},
            notes = #{notes},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from storeodrl
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from storeodrl
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

</mapper>
