<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.schema.reward.dao.UserBadgeMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.schema.reward.UserBadge">
        <id property="id" column="id" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="userId" column="user" />
        <result property="badgeId" column="badge" />
        <association property="badge" columnPrefix="badge_"
            javaType="net.bodz.lily.schema.reward.Badge" 
            resultMap="net.bodz.lily.schema.reward.dao.BadgeMapper.objlist_map" />
        <association property="user" columnPrefix="user_"
            javaType="net.bodz.lily.schema.account.User" 
            resultMap="net.bodz.lily.schema.account.dao.UserMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.creation, 
            a.lastmod, 
            a."version", 
            a."user", 
            a.badge, 
            badge.id badge_id, 
            badge.label badge_label, 
            badge.description badge_description, 
            badge.priority badge_priority, 
            badge.flags badge_flags, 
            badge."state" badge_state, 
            badge.creation badge_creation, 
            badge.lastmod badge_lastmod, 
            badge."version" badge_version, 
            badge.expr badge_expr, 
            badge.val badge_val, 
            badge.levels badge_levels, 
            badge.descend badge_descend, 
            badge.transient badge_transient, 
            badge.indexed badge_indexed, 
            badge.image badge_image, 
            "user".id user_id, 
            "user"."type" user_type, 
            "user"."name" user_name, 
            "user".label user_label, 
            "user".description user_description, 
            "user".priority user_priority, 
            "user".flags user_flags, 
            "user"."state" user_state, 
            "user".creation user_creation, 
            "user".lastmod user_lastmod, 
            "user"."version" user_version, 
            "user".props user_props, 
            "user".gid0 user_gid0, 
            "user".referer user_referer, 
            "user".person user_person
        from user_badge a
            left join badge badge on a.badge = badge.id
            left join "user" "user" on a."user" = "user".id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.creation, 
            a.lastmod, 
            a."version", 
            a."user", 
            a.badge, 
            badge.id badge_id, 
            badge.label badge_label, 
            badge.description badge_description, 
            badge.priority badge_priority, 
            badge.flags badge_flags, 
            badge."state" badge_state, 
            badge.creation badge_creation, 
            badge.lastmod badge_lastmod, 
            badge."version" badge_version, 
            badge.expr badge_expr, 
            badge.val badge_val, 
            badge.levels badge_levels, 
            badge.descend badge_descend, 
            badge.transient badge_transient, 
            badge.indexed badge_indexed, 
            badge.image badge_image, 
            "user".id user_id, 
            "user"."type" user_type, 
            "user"."name" user_name, 
            "user".label user_label, 
            "user".description user_description, 
            "user".priority user_priority, 
            "user".flags user_flags, 
            "user"."state" user_state, 
            "user".creation user_creation, 
            "user".lastmod user_lastmod, 
            "user"."version" user_version, 
            "user".props user_props, 
            "user".gid0 user_gid0, 
            "user".referer user_referer, 
            "user".person user_person
        from user_badge a
            left join badge badge on a.badge = badge.id
            left join "user" "user" on a."user" = "user".id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.userId != null">and a."user" = #{m.userId}</if>
        <if test="m.userIdRange!= null">
            <if test="m.userIdRange.hasStartIncl">and a."user" >= #{m.userIdRange.start}</if>
            <if test="m.userIdRange.hasStartExcl">and a."user" > #{m.userIdRange.start}</if>
            <if test="m.userIdRange.hasEndIncl">and a."user" &lt;= #{m.userIdRange.end}</if>
            <if test="m.userIdRange.hasEndExcl">and a."user" &lt; #{m.userIdRange.end}</if>
        </if>
        <if test="m.badgeId != null">and a.badge = #{m.badgeId}</if>
        <if test="m.badgeIdRange!= null">
            <if test="m.badgeIdRange.hasStartIncl">and a.badge >= #{m.badgeIdRange.start}</if>
            <if test="m.badgeIdRange.hasStartExcl">and a.badge > #{m.badgeIdRange.start}</if>
            <if test="m.badgeIdRange.hasEndIncl">and a.badge &lt;= #{m.badgeIdRange.end}</if>
            <if test="m.badgeIdRange.hasEndExcl">and a.badge &lt; #{m.badgeIdRange.end}</if>
        </if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into user_badge(
            creation,
            lastmod,
            "version",
            "user",
            badge
        ) values(
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{userId},
            #{badgeId}
        );
    ]]></insert>

    <update id="update">
        update user_badge
        <set>
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            "user" = #{userId},
            badge = #{badgeId},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from user_badge
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from user_badge
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

</mapper>
