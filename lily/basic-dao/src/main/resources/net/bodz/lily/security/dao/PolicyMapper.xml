<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.security.dao.PolicyMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.security.Policy">
        <id property="id" column="id" />
        <result property="uniqName" column="name" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="properties.jsonStr" column="props" />
        <result property="controlClass" column="cclass" />
        <result property="methodName" column="method" />
        <result property="allowBits" column="allow" />
        <result property="denyBits" column="deny" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a."name", 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.props, 
            a.cclass, 
            a."method", 
            a.allow, 
            a.deny
        from policy a
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a."name", 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.props, 
            a.cclass, 
            a."method", 
            a.allow, 
            a.deny
        from policy a
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.uniqName != null">and a."name" = #{m.uniqName}</if>
        <if test="m.uniqNamePattern != null">and a."name" like '${m.uniqNamePattern}'</if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.labelPattern != null">and a.label like '${m.labelPattern}'</if>
        <if test="m.description != null">and a.description = #{m.description}</if>
        <if test="m.descriptionPattern != null">and a.description like '${m.descriptionPattern}'</if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.properties != null">and a.props = #{m.properties}</if>
        <if test="m.controlClass != null">and a.cclass = #{m.controlClass}</if>
        <if test="m.controlClassPattern != null">and a.cclass like '${m.controlClassPattern}'</if>
        <if test="m.methodName != null">and a."method" = #{m.methodName}</if>
        <if test="m.methodNamePattern != null">and a."method" like '${m.methodNamePattern}'</if>
        <if test="m.allowBits != null">and a.allow = #{m.allowBits}</if>
        <if test="m.allowBitsRange!= null">
            <if test="m.allowBitsRange.hasStartIncl">and a.allow >= #{m.allowBitsRange.start}</if>
            <if test="m.allowBitsRange.hasStartExcl">and a.allow > #{m.allowBitsRange.start}</if>
            <if test="m.allowBitsRange.hasEndIncl">and a.allow &lt;= #{m.allowBitsRange.end}</if>
            <if test="m.allowBitsRange.hasEndExcl">and a.allow &lt; #{m.allowBitsRange.end}</if>
        </if>
        <if test="m.denyBits != null">and a.deny = #{m.denyBits}</if>
        <if test="m.denyBitsRange!= null">
            <if test="m.denyBitsRange.hasStartIncl">and a.deny >= #{m.denyBitsRange.start}</if>
            <if test="m.denyBitsRange.hasStartExcl">and a.deny > #{m.denyBitsRange.start}</if>
            <if test="m.denyBitsRange.hasEndIncl">and a.deny &lt;= #{m.denyBitsRange.end}</if>
            <if test="m.denyBitsRange.hasEndExcl">and a.deny &lt; #{m.denyBitsRange.end}</if>
        </if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into policy(
            "name",
            label,
            description,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            props,
            cclass,
            "method",
            allow,
            deny
        ) values(
            #{uniqName},
            #{label},
            #{description},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{properties.jsonStr}::jsonb,
            #{controlClass},
            #{methodName},
            #{allowBits},
            #{denyBits}
        );
    ]]></insert>

    <update id="update">
        update policy
        <set>
            "name" = #{uniqName},
            label = #{label},
            description = #{description},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            props = #{properties.jsonStr}::jsonb,
            cclass = #{controlClass},
            "method" = #{methodName},
            allow = #{allowBits},
            deny = #{denyBits},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from policy
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from policy
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

    <update id="delete_xrefs">
        alter table lily.policy_group drop constraint policy_group_policy_fkey;
        alter table lily.policy_user drop constraint policy_user_policy_fkey;
    </update>

    <update id="create_xrefs">
        alter table lily.policy_group
            add constraint policy_group_policy_fkey foreign key (policy)
            references lily.policy (id)
            on update cascade
            on delete cascade
            ;
        alter table lily.policy_user
            add constraint policy_user_policy_fkey foreign key (policy)
            references lily.policy (id)
            on update cascade
            on delete cascade
            ;
    </update>

</mapper>
