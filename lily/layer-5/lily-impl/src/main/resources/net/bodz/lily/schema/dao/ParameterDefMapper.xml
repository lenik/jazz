<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.schema.dao.ParameterDefMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.schema.ParameterDef">
        <id property="id" column="id" />
        <result property="codeName" column="code" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="schemaId" column="schema" />
        <association property="schema" columnPrefix="schema_"
            javaType="net.bodz.lily.schema.SchemaDef" 
            resultMap="net.bodz.lily.schema.dao.SchemaDefMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.code, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a."schema", 
            "schema".id schema_id, 
            "schema".code schema_code, 
            "schema".label schema_label, 
            "schema".description schema_description, 
            "schema".priority schema_priority, 
            "schema".flags schema_flags, 
            "schema"."state" schema_state, 
            "schema".creation schema_creation, 
            "schema".lastmod schema_lastmod, 
            "schema"."version" schema_version, 
            "schema".dummy schema_dummy
        from _parm a
            left join _schema "schema" on a."schema" = "schema".id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.code, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a."schema", 
            "schema".id schema_id, 
            "schema".code schema_code, 
            "schema".label schema_label, 
            "schema".description schema_description, 
            "schema".priority schema_priority, 
            "schema".flags schema_flags, 
            "schema"."state" schema_state, 
            "schema".creation schema_creation, 
            "schema".lastmod schema_lastmod, 
            "schema"."version" schema_version, 
            "schema".dummy schema_dummy
        from _parm a
            left join _schema "schema" on a."schema" = "schema".id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.codeName != null">and a.code = #{m.codeName}</if>
        <if test="m.codeNamePattern != null">and a.code like '${m.codeNamePattern}'</if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.labelPattern != null">and a.label like '${m.labelPattern}'</if>
        <if test="m.description != null">and a.description = #{m.description}</if>
        <if test="m.descriptionPattern != null">and a.description like '${m.descriptionPattern}'</if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.schemaId != null">and a."schema" = #{m.schemaId}</if>
        <if test="m.schemaIdRange!= null">
            <if test="m.schemaIdRange.hasStartIncl">and a."schema" >= #{m.schemaIdRange.start}</if>
            <if test="m.schemaIdRange.hasStartExcl">and a."schema" > #{m.schemaIdRange.start}</if>
            <if test="m.schemaIdRange.hasEndIncl">and a."schema" &lt;= #{m.schemaIdRange.end}</if>
            <if test="m.schemaIdRange.hasEndExcl">and a."schema" &lt; #{m.schemaIdRange.end}</if>
        </if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into _parm(
            code,
            label,
            description,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            "schema"
        ) values(
            #{codeName},
            #{label},
            #{description},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{schemaId}
        );
    ]]></insert>

    <update id="update">
        update _parm
        <set>
            code = #{codeName},
            label = #{label},
            description = #{description},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            "schema" = #{schemaId},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from _parm
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from _parm
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

    <update id="delete_xrefs">
        alter table lily._parmval drop constraint _parmval_parm_fkey;
    </update>

    <update id="create_xrefs">
        alter table lily._parmval
            add constraint _parmval_parm_fkey foreign key (parm)
            references lily._parm (id)
            on update cascade
            on delete cascade
            ;
    </update>

</mapper>
