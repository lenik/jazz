<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.geo.dao.ZoneMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.geo.Zone">
        <id property="id" column="id" />
        <result property="codeName" column="code" />
        <result property="mode" column="mode" />
        <result property="acl" column="acl" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="country" column="country" />
        <result property="depth" column="depth" />
        <result property="telcode" column="telcode" />
        <result property="postcode" column="postcode" />
        <result property="properties.jsonStr" column="props" />
        <result property="data.jsonStr" column="data" />
        <result property="uId" column="uid" />
        <result property="gId" column="gid" />
        <result property="catId" column="cat" />
        <result property="parentId" column="parent" />
        <association property="parent" columnPrefix="parent_"
            javaType="net.bodz.lily.geo.Zone" 
            resultMap="objlist_map" />
        <association property="u" columnPrefix="uid_"
            javaType="net.bodz.lily.security.User" 
            resultMap="net.bodz.lily.security.dao.UserMapper.objlist_map" />
        <association property="g" columnPrefix="gid_"
            javaType="net.bodz.lily.security.Group" 
            resultMap="net.bodz.lily.security.dao.GroupMapper.objlist_map" />
        <association property="cat" columnPrefix="cat_"
            javaType="net.bodz.lily.geo.ZoneCategory" 
            resultMap="net.bodz.lily.geo.dao.ZoneCategoryMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.code, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.cat, 
            a.country, 
            a.parent, 
            a."depth", 
            a.telcode, 
            a.postcode, 
            a.props, 
            a."data", 
            parent.id parent_id, 
            parent.code parent_code, 
            parent.uid parent_uid, 
            parent.gid parent_gid, 
            parent.mode parent_mode, 
            parent.acl parent_acl, 
            parent.label parent_label, 
            parent.description parent_description, 
            parent.priority parent_priority, 
            parent.flags parent_flags, 
            parent."state" parent_state, 
            parent.creation parent_creation, 
            parent.lastmod parent_lastmod, 
            parent."version" parent_version, 
            parent.cat parent_cat, 
            parent.country parent_country, 
            parent.parent parent_parent, 
            parent."depth" parent_depth, 
            parent.telcode parent_telcode, 
            parent.postcode parent_postcode, 
            parent.props parent_props, 
            parent."data" parent_data, 
            uid.id uid_id, 
            uid."type" uid_type, 
            uid."name" uid_name, 
            uid.label uid_label, 
            uid.description uid_description, 
            uid.priority uid_priority, 
            uid.flags uid_flags, 
            uid."state" uid_state, 
            uid.creation uid_creation, 
            uid.lastmod uid_lastmod, 
            uid."version" uid_version, 
            uid.props uid_props, 
            uid.gid0 uid_gid0, 
            uid.referer uid_referer, 
            uid.person uid_person, 
            gid.id gid_id, 
            gid."name" gid_name, 
            gid."type" gid_type, 
            gid.label gid_label, 
            gid.description gid_description, 
            gid.priority gid_priority, 
            gid.flags gid_flags, 
            gid."state" gid_state, 
            gid.creation gid_creation, 
            gid.lastmod gid_lastmod, 
            gid."version" gid_version, 
            gid.props gid_props, 
            gid.parent gid_parent, 
            cat.id cat_id, 
            cat.code cat_code, 
            cat.uid cat_uid, 
            cat.gid cat_gid, 
            cat.mode cat_mode, 
            cat.acl cat_acl, 
            cat.label cat_label, 
            cat.description cat_description, 
            cat.priority cat_priority, 
            cat.flags cat_flags, 
            cat."state" cat_state, 
            cat.creation cat_creation, 
            cat.lastmod cat_lastmod, 
            cat."version" cat_version, 
            cat.image cat_image, 
            cat.imagealt cat_imagealt, 
            cat.props cat_props, 
            cat.parent cat_parent, 
            cat."depth" cat_depth, 
            cat.nref cat_nref
        from zone a
            left join "zone" parent on a.parent = parent.id
            left join "user" uid on a.uid = uid.id
            left join "group" gid on a.gid = gid.id
            left join zonecat cat on a.cat = cat.id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.code, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.cat, 
            a.country, 
            a.parent, 
            a."depth", 
            a.telcode, 
            a.postcode, 
            a.props, 
            a."data", 
            parent.id parent_id, 
            parent.code parent_code, 
            parent.uid parent_uid, 
            parent.gid parent_gid, 
            parent.mode parent_mode, 
            parent.acl parent_acl, 
            parent.label parent_label, 
            parent.description parent_description, 
            parent.priority parent_priority, 
            parent.flags parent_flags, 
            parent."state" parent_state, 
            parent.creation parent_creation, 
            parent.lastmod parent_lastmod, 
            parent."version" parent_version, 
            parent.cat parent_cat, 
            parent.country parent_country, 
            parent.parent parent_parent, 
            parent."depth" parent_depth, 
            parent.telcode parent_telcode, 
            parent.postcode parent_postcode, 
            parent.props parent_props, 
            parent."data" parent_data, 
            uid.id uid_id, 
            uid."type" uid_type, 
            uid."name" uid_name, 
            uid.label uid_label, 
            uid.description uid_description, 
            uid.priority uid_priority, 
            uid.flags uid_flags, 
            uid."state" uid_state, 
            uid.creation uid_creation, 
            uid.lastmod uid_lastmod, 
            uid."version" uid_version, 
            uid.props uid_props, 
            uid.gid0 uid_gid0, 
            uid.referer uid_referer, 
            uid.person uid_person, 
            gid.id gid_id, 
            gid."name" gid_name, 
            gid."type" gid_type, 
            gid.label gid_label, 
            gid.description gid_description, 
            gid.priority gid_priority, 
            gid.flags gid_flags, 
            gid."state" gid_state, 
            gid.creation gid_creation, 
            gid.lastmod gid_lastmod, 
            gid."version" gid_version, 
            gid.props gid_props, 
            gid.parent gid_parent, 
            cat.id cat_id, 
            cat.code cat_code, 
            cat.uid cat_uid, 
            cat.gid cat_gid, 
            cat.mode cat_mode, 
            cat.acl cat_acl, 
            cat.label cat_label, 
            cat.description cat_description, 
            cat.priority cat_priority, 
            cat.flags cat_flags, 
            cat."state" cat_state, 
            cat.creation cat_creation, 
            cat.lastmod cat_lastmod, 
            cat."version" cat_version, 
            cat.image cat_image, 
            cat.imagealt cat_imagealt, 
            cat.props cat_props, 
            cat.parent cat_parent, 
            cat."depth" cat_depth, 
            cat.nref cat_nref
        from zone a
            left join "zone" parent on a.parent = parent.id
            left join "user" uid on a.uid = uid.id
            left join "group" gid on a.gid = gid.id
            left join zonecat cat on a.cat = cat.id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.codeName != null">and a.code = #{m.codeName}</if>
        <if test="m.codeNamePattern != null">and a.code like '${m.codeNamePattern}'</if>
        <if test="m.uId != null">and a.uid = #{m.uId}</if>
        <if test="m.uIdRange!= null">
            <if test="m.uIdRange.hasStartIncl">and a.uid >= #{m.uIdRange.start}</if>
            <if test="m.uIdRange.hasStartExcl">and a.uid > #{m.uIdRange.start}</if>
            <if test="m.uIdRange.hasEndIncl">and a.uid &lt;= #{m.uIdRange.end}</if>
            <if test="m.uIdRange.hasEndExcl">and a.uid &lt; #{m.uIdRange.end}</if>
        </if>
        <if test="m.gId != null">and a.gid = #{m.gId}</if>
        <if test="m.gIdRange!= null">
            <if test="m.gIdRange.hasStartIncl">and a.gid >= #{m.gIdRange.start}</if>
            <if test="m.gIdRange.hasStartExcl">and a.gid > #{m.gIdRange.start}</if>
            <if test="m.gIdRange.hasEndIncl">and a.gid &lt;= #{m.gIdRange.end}</if>
            <if test="m.gIdRange.hasEndExcl">and a.gid &lt; #{m.gIdRange.end}</if>
        </if>
        <if test="m.mode != null">and a.mode = #{m.mode}</if>
        <if test="m.modeRange!= null">
            <if test="m.modeRange.hasStartIncl">and a.mode >= #{m.modeRange.start}</if>
            <if test="m.modeRange.hasStartExcl">and a.mode > #{m.modeRange.start}</if>
            <if test="m.modeRange.hasEndIncl">and a.mode &lt;= #{m.modeRange.end}</if>
            <if test="m.modeRange.hasEndExcl">and a.mode &lt; #{m.modeRange.end}</if>
        </if>
        <if test="m.acl != null">and a.acl = #{m.acl}</if>
        <if test="m.aclRange!= null">
            <if test="m.aclRange.hasStartIncl">and a.acl >= #{m.aclRange.start}</if>
            <if test="m.aclRange.hasStartExcl">and a.acl > #{m.aclRange.start}</if>
            <if test="m.aclRange.hasEndIncl">and a.acl &lt;= #{m.aclRange.end}</if>
            <if test="m.aclRange.hasEndExcl">and a.acl &lt; #{m.aclRange.end}</if>
        </if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.labelPattern != null">and a.label like '${m.labelPattern}'</if>
        <if test="m.description != null">and a.description = #{m.description}</if>
        <if test="m.descriptionPattern != null">and a.description like '${m.descriptionPattern}'</if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.catId != null">and a.cat = #{m.catId}</if>
        <if test="m.catIdRange!= null">
            <if test="m.catIdRange.hasStartIncl">and a.cat >= #{m.catIdRange.start}</if>
            <if test="m.catIdRange.hasStartExcl">and a.cat > #{m.catIdRange.start}</if>
            <if test="m.catIdRange.hasEndIncl">and a.cat &lt;= #{m.catIdRange.end}</if>
            <if test="m.catIdRange.hasEndExcl">and a.cat &lt; #{m.catIdRange.end}</if>
        </if>
        <if test="m.country != null">and a.country = #{m.country}</if>
        <if test="m.countryPattern != null">and a.country like '${m.countryPattern}'</if>
        <if test="m.parentId != null">and a.parent = #{m.parentId}</if>
        <if test="m.parentIdRange!= null">
            <if test="m.parentIdRange.hasStartIncl">and a.parent >= #{m.parentIdRange.start}</if>
            <if test="m.parentIdRange.hasStartExcl">and a.parent > #{m.parentIdRange.start}</if>
            <if test="m.parentIdRange.hasEndIncl">and a.parent &lt;= #{m.parentIdRange.end}</if>
            <if test="m.parentIdRange.hasEndExcl">and a.parent &lt; #{m.parentIdRange.end}</if>
        </if>
        <if test="m.depth != null">and a."depth" = #{m.depth}</if>
        <if test="m.depthRange!= null">
            <if test="m.depthRange.hasStartIncl">and a."depth" >= #{m.depthRange.start}</if>
            <if test="m.depthRange.hasStartExcl">and a."depth" > #{m.depthRange.start}</if>
            <if test="m.depthRange.hasEndIncl">and a."depth" &lt;= #{m.depthRange.end}</if>
            <if test="m.depthRange.hasEndExcl">and a."depth" &lt; #{m.depthRange.end}</if>
        </if>
        <if test="m.telcode != null">and a.telcode = #{m.telcode}</if>
        <if test="m.telcodePattern != null">and a.telcode like '${m.telcodePattern}'</if>
        <if test="m.postcode != null">and a.postcode = #{m.postcode}</if>
        <if test="m.postcodePattern != null">and a.postcode like '${m.postcodePattern}'</if>
        <if test="m.properties != null">and a.props = #{m.properties}</if>
        <if test="m.data != null">and a."data" = #{m.data}</if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into zone(
            code,
            uid,
            gid,
            mode,
            acl,
            label,
            description,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            cat,
            country,
            parent,
            "depth",
            telcode,
            postcode,
            props,
            "data"
        ) values(
            #{codeName},
            #{uId},
            #{gId},
            #{mode},
            #{acl},
            #{label},
            #{description},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{catId},
            #{country},
            #{parentId},
            #{depth},
            #{telcode},
            #{postcode},
            #{properties.jsonStr}::jsonb,
            #{data.jsonStr}::jsonb
        );
    ]]></insert>

    <update id="update">
        update zone
        <set>
            code = #{codeName},
            uid = #{uId},
            gid = #{gId},
            mode = #{mode},
            acl = #{acl},
            label = #{label},
            description = #{description},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            cat = #{catId},
            country = #{country},
            parent = #{parentId},
            "depth" = #{depth},
            telcode = #{telcode},
            postcode = #{postcode},
            props = #{properties.jsonStr}::jsonb,
            "data" = #{data.jsonStr}::jsonb,
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from zone
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from zone
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

    <update id="delete_xrefs">
        alter table lily.org drop constraint org_zone_fkey;
        alter table lily.orgunit drop constraint orgunit_zone_fkey;
        alter table lily.person drop constraint person_zone_fkey;
        alter table lily."zone" drop constraint zone_parent_fkey;
        alter table violet.tranodr drop constraint tranodr_d_zone_fkey;
        alter table violet.tranodr drop constraint tranodr_s_zone_fkey;
    </update>

    <update id="create_xrefs">
        alter table lily.org
            add constraint org_zone_fkey foreign key ("zone")
            references lily."zone" (id)
            on update cascade
            ;
        alter table lily.orgunit
            add constraint orgunit_zone_fkey foreign key ("zone")
            references lily."zone" (id)
            on update cascade
            ;
        alter table lily.person
            add constraint person_zone_fkey foreign key ("zone")
            references lily."zone" (id)
            on update cascade
            ;
        alter table lily."zone"
            add constraint zone_parent_fkey foreign key (parent)
            references lily."zone" (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.tranodr
            add constraint tranodr_d_zone_fkey foreign key (d_zone)
            references lily."zone" (id)
            on update cascade
            ;
        alter table violet.tranodr
            add constraint tranodr_s_zone_fkey foreign key (s_zone)
            references lily."zone" (id)
            on update cascade
            ;
    </update>

</mapper>
