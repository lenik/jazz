<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.contact.dao.OrgUnitMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.contact.OrgUnit">
        <id property="id" column="id" />
        <result property="accessMode" column="mode" />
        <result property="acl" column="acl" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="contact.rename" column="alias" />
        <result property="contact.properties.jsonStr" column="ctprops" />
        <result property="contact.address1" column="address1" />
        <result property="contact.address2" column="address2" />
        <result property="contact.tel" column="tel" />
        <result property="contact.telValidated" column="telok" />
        <result property="contact.email" column="email" />
        <result property="contact.emailValidated" column="emailok" />
        <result property="properties.jsonStr" column="props" />
        <result property="depth" column="depth" />
        <result property="ownerUserId" column="uid" />
        <result property="ownerGroupId" column="gid" />
        <result property="contact.zoneId" column="zone" />
        <result property="orgId" column="org" />
        <result property="parentId" column="parent" />
        <association property="org" columnPrefix="org_"
            javaType="net.bodz.lily.contact.Organization" 
            resultMap="net.bodz.lily.contact.dao.OrganizationMapper.objlist_map" />
        <association property="ownerGroup" columnPrefix="ownerGroup_"
            javaType="net.bodz.lily.security.Group" 
            resultMap="net.bodz.lily.security.dao.GroupMapper.objlist_map" />
        <association property="parent" columnPrefix="parent_"
            javaType="net.bodz.lily.contact.OrgUnit" 
            resultMap="objlist_map" />
        <association property="ownerUser" columnPrefix="ownerUser_"
            javaType="net.bodz.lily.security.User" 
            resultMap="net.bodz.lily.security.dao.UserMapper.objlist_map" />
        <association property="contact.zone" columnPrefix="zone_"
            javaType="net.bodz.lily.geo.Zone" 
            resultMap="net.bodz.lily.geo.dao.ZoneMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.alias, 
            a.ctprops, 
            a.address1, 
            a.address2, 
            a."zone", 
            a.tel, 
            a.telok, 
            a.email, 
            a.emailok, 
            a.props, 
            a.org, 
            a.parent, 
            a."depth", 
            org.id org_id, 
            org.uid org_uid, 
            org.gid org_gid, 
            org.mode org_mode, 
            org.acl org_acl, 
            org.label org_label, 
            org.description org_description, 
            org.priority org_priority, 
            org.flags org_flags, 
            org."state" org_state, 
            org.creation org_creation, 
            org.lastmod org_lastmod, 
            org."version" org_version, 
            org.alias org_alias, 
            org.ctprops org_ctprops, 
            org.address1 org_address1, 
            org.address2 org_address2, 
            org."zone" org_zone, 
            org.tel org_tel, 
            org.telok org_telok, 
            org.email org_email, 
            org.emailok org_emailok, 
            org.props org_props, 
            org.cat org_cat, 
            org.birthday org_birthday, 
            org.locale org_locale, 
            org.timezone org_timezone, 
            org.nrole org_nrole, 
            org.supplier org_supplier, 
            org.customer org_customer, 
            org.subject org_subject, 
            org.nbank org_nbank, 
            org."size" org_size, 
            org.taxid org_taxid, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            parent.id parent_id, 
            parent.uid parent_uid, 
            parent.gid parent_gid, 
            parent.mode parent_mode, 
            parent.acl parent_acl, 
            parent.label parent_label, 
            parent.description parent_description, 
            parent.priority parent_priority, 
            parent.flags parent_flags, 
            parent."state" parent_state, 
            parent.creation parent_creation, 
            parent.lastmod parent_lastmod, 
            parent."version" parent_version, 
            parent.alias parent_alias, 
            parent.ctprops parent_ctprops, 
            parent.address1 parent_address1, 
            parent.address2 parent_address2, 
            parent."zone" parent_zone, 
            parent.tel parent_tel, 
            parent.telok parent_telok, 
            parent.email parent_email, 
            parent.emailok parent_emailok, 
            parent.props parent_props, 
            parent.org parent_org, 
            parent.parent parent_parent, 
            parent."depth" parent_depth, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person, 
            "zone".id zone_id, 
            "zone".code zone_code, 
            "zone".uid zone_uid, 
            "zone".gid zone_gid, 
            "zone".mode zone_mode, 
            "zone".acl zone_acl, 
            "zone".label zone_label, 
            "zone".description zone_description, 
            "zone".priority zone_priority, 
            "zone".flags zone_flags, 
            "zone"."state" zone_state, 
            "zone".creation zone_creation, 
            "zone".lastmod zone_lastmod, 
            "zone"."version" zone_version, 
            "zone".cat zone_cat, 
            "zone".country zone_country, 
            "zone".parent zone_parent, 
            "zone"."depth" zone_depth, 
            "zone".telcode zone_telcode, 
            "zone".postcode zone_postcode, 
            "zone".props zone_props, 
            "zone"."data" zone_data
        from orgunit a
            left join org org on a.org = org.id
            left join "group" ownerGroup on a.gid = ownerGroup.id
            left join orgunit parent on a.parent = parent.id
            left join "user" ownerUser on a.uid = ownerUser.id
            left join "zone" "zone" on a."zone" = "zone".id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.alias, 
            a.ctprops, 
            a.address1, 
            a.address2, 
            a."zone", 
            a.tel, 
            a.telok, 
            a.email, 
            a.emailok, 
            a.props, 
            a.org, 
            a.parent, 
            a."depth", 
            org.id org_id, 
            org.uid org_uid, 
            org.gid org_gid, 
            org.mode org_mode, 
            org.acl org_acl, 
            org.label org_label, 
            org.description org_description, 
            org.priority org_priority, 
            org.flags org_flags, 
            org."state" org_state, 
            org.creation org_creation, 
            org.lastmod org_lastmod, 
            org."version" org_version, 
            org.alias org_alias, 
            org.ctprops org_ctprops, 
            org.address1 org_address1, 
            org.address2 org_address2, 
            org."zone" org_zone, 
            org.tel org_tel, 
            org.telok org_telok, 
            org.email org_email, 
            org.emailok org_emailok, 
            org.props org_props, 
            org.cat org_cat, 
            org.birthday org_birthday, 
            org.locale org_locale, 
            org.timezone org_timezone, 
            org.nrole org_nrole, 
            org.supplier org_supplier, 
            org.customer org_customer, 
            org.subject org_subject, 
            org.nbank org_nbank, 
            org."size" org_size, 
            org.taxid org_taxid, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            parent.id parent_id, 
            parent.uid parent_uid, 
            parent.gid parent_gid, 
            parent.mode parent_mode, 
            parent.acl parent_acl, 
            parent.label parent_label, 
            parent.description parent_description, 
            parent.priority parent_priority, 
            parent.flags parent_flags, 
            parent."state" parent_state, 
            parent.creation parent_creation, 
            parent.lastmod parent_lastmod, 
            parent."version" parent_version, 
            parent.alias parent_alias, 
            parent.ctprops parent_ctprops, 
            parent.address1 parent_address1, 
            parent.address2 parent_address2, 
            parent."zone" parent_zone, 
            parent.tel parent_tel, 
            parent.telok parent_telok, 
            parent.email parent_email, 
            parent.emailok parent_emailok, 
            parent.props parent_props, 
            parent.org parent_org, 
            parent.parent parent_parent, 
            parent."depth" parent_depth, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person, 
            "zone".id zone_id, 
            "zone".code zone_code, 
            "zone".uid zone_uid, 
            "zone".gid zone_gid, 
            "zone".mode zone_mode, 
            "zone".acl zone_acl, 
            "zone".label zone_label, 
            "zone".description zone_description, 
            "zone".priority zone_priority, 
            "zone".flags zone_flags, 
            "zone"."state" zone_state, 
            "zone".creation zone_creation, 
            "zone".lastmod zone_lastmod, 
            "zone"."version" zone_version, 
            "zone".cat zone_cat, 
            "zone".country zone_country, 
            "zone".parent zone_parent, 
            "zone"."depth" zone_depth, 
            "zone".telcode zone_telcode, 
            "zone".postcode zone_postcode, 
            "zone".props zone_props, 
            "zone"."data" zone_data
        from orgunit a
            left join org org on a.org = org.id
            left join "group" ownerGroup on a.gid = ownerGroup.id
            left join orgunit parent on a.parent = parent.id
            left join "user" ownerUser on a.uid = ownerUser.id
            left join "zone" "zone" on a."zone" = "zone".id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.ownerUserId != null">and a.uid = #{m.ownerUserId}</if>
        <if test="m.ownerUserIdRange!= null">
            <if test="m.ownerUserIdRange.hasStartIncl">and a.uid >= #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasStartExcl">and a.uid > #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasEndIncl">and a.uid &lt;= #{m.ownerUserIdRange.end}</if>
            <if test="m.ownerUserIdRange.hasEndExcl">and a.uid &lt; #{m.ownerUserIdRange.end}</if>
        </if>
        <if test="m.ownerGroupId != null">and a.gid = #{m.ownerGroupId}</if>
        <if test="m.ownerGroupIdRange!= null">
            <if test="m.ownerGroupIdRange.hasStartIncl">and a.gid >= #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasStartExcl">and a.gid > #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasEndIncl">and a.gid &lt;= #{m.ownerGroupIdRange.end}</if>
            <if test="m.ownerGroupIdRange.hasEndExcl">and a.gid &lt; #{m.ownerGroupIdRange.end}</if>
        </if>
        <if test="m.accessMode != null">and a.mode = #{m.accessMode}</if>
        <if test="m.accessModeRange!= null">
            <if test="m.accessModeRange.hasStartIncl">and a.mode >= #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasStartExcl">and a.mode > #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasEndIncl">and a.mode &lt;= #{m.accessModeRange.end}</if>
            <if test="m.accessModeRange.hasEndExcl">and a.mode &lt; #{m.accessModeRange.end}</if>
        </if>
        <if test="m.acl != null">and a.acl = #{m.acl}</if>
        <if test="m.aclRange!= null">
            <if test="m.aclRange.hasStartIncl">and a.acl >= #{m.aclRange.start}</if>
            <if test="m.aclRange.hasStartExcl">and a.acl > #{m.aclRange.start}</if>
            <if test="m.aclRange.hasEndIncl">and a.acl &lt;= #{m.aclRange.end}</if>
            <if test="m.aclRange.hasEndExcl">and a.acl &lt; #{m.aclRange.end}</if>
        </if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.labelPattern != null">and a.label like '${m.labelPattern}'</if>
        <if test="m.description != null">and a.description = #{m.description}</if>
        <if test="m.descriptionPattern != null">and a.description like '${m.descriptionPattern}'</if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.contact.rename != null">and a.alias = #{m.contact.rename}</if>
        <if test="m.contact.renamePattern != null">and a.alias like '${m.contact.renamePattern}'</if>
        <if test="m.contact.properties != null">and a.ctprops = #{m.contact.properties}</if>
        <if test="m.contact.address1 != null">and a.address1 = #{m.contact.address1}</if>
        <if test="m.contact.address1Pattern != null">and a.address1 like '${m.contact.address1Pattern}'</if>
        <if test="m.contact.address2 != null">and a.address2 = #{m.contact.address2}</if>
        <if test="m.contact.address2Pattern != null">and a.address2 like '${m.contact.address2Pattern}'</if>
        <if test="m.contact.zoneId != null">and a."zone" = #{m.contact.zoneId}</if>
        <if test="m.contact.zoneIdRange!= null">
            <if test="m.contact.zoneIdRange.hasStartIncl">and a."zone" >= #{m.contact.zoneIdRange.start}</if>
            <if test="m.contact.zoneIdRange.hasStartExcl">and a."zone" > #{m.contact.zoneIdRange.start}</if>
            <if test="m.contact.zoneIdRange.hasEndIncl">and a."zone" &lt;= #{m.contact.zoneIdRange.end}</if>
            <if test="m.contact.zoneIdRange.hasEndExcl">and a."zone" &lt; #{m.contact.zoneIdRange.end}</if>
        </if>
        <if test="m.contact.tel != null">and a.tel = #{m.contact.tel}</if>
        <if test="m.contact.telPattern != null">and a.tel like '${m.contact.telPattern}'</if>
        <if test="m.contact.telValidated != null">and a.telok = #{m.contact.telValidated}</if>
        <if test="m.contact.email != null">and a.email = #{m.contact.email}</if>
        <if test="m.contact.emailPattern != null">and a.email like '${m.contact.emailPattern}'</if>
        <if test="m.contact.emailValidated != null">and a.emailok = #{m.contact.emailValidated}</if>
        <if test="m.properties != null">and a.props = #{m.properties}</if>
        <if test="m.orgId != null">and a.org = #{m.orgId}</if>
        <if test="m.orgIdRange!= null">
            <if test="m.orgIdRange.hasStartIncl">and a.org >= #{m.orgIdRange.start}</if>
            <if test="m.orgIdRange.hasStartExcl">and a.org > #{m.orgIdRange.start}</if>
            <if test="m.orgIdRange.hasEndIncl">and a.org &lt;= #{m.orgIdRange.end}</if>
            <if test="m.orgIdRange.hasEndExcl">and a.org &lt; #{m.orgIdRange.end}</if>
        </if>
        <if test="m.parentId != null">and a.parent = #{m.parentId}</if>
        <if test="m.parentIdRange!= null">
            <if test="m.parentIdRange.hasStartIncl">and a.parent >= #{m.parentIdRange.start}</if>
            <if test="m.parentIdRange.hasStartExcl">and a.parent > #{m.parentIdRange.start}</if>
            <if test="m.parentIdRange.hasEndIncl">and a.parent &lt;= #{m.parentIdRange.end}</if>
            <if test="m.parentIdRange.hasEndExcl">and a.parent &lt; #{m.parentIdRange.end}</if>
        </if>
        <if test="m.depth != null">and a."depth" = #{m.depth}</if>
        <if test="m.depthRange!= null">
            <if test="m.depthRange.hasStartIncl">and a."depth" >= #{m.depthRange.start}</if>
            <if test="m.depthRange.hasStartExcl">and a."depth" > #{m.depthRange.start}</if>
            <if test="m.depthRange.hasEndIncl">and a."depth" &lt;= #{m.depthRange.end}</if>
            <if test="m.depthRange.hasEndExcl">and a."depth" &lt; #{m.depthRange.end}</if>
        </if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into orgunit(
            uid,
            gid,
            mode,
            acl,
            label,
            description,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            alias,
            ctprops,
            address1,
            address2,
            "zone",
            tel,
            telok,
            email,
            emailok,
            props,
            org,
            parent,
            "depth"
        ) values(
            #{ownerUserId},
            #{ownerGroupId},
            #{accessMode},
            #{acl},
            #{label},
            #{description},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{contact.rename},
            #{contact.properties.jsonStr}::jsonb,
            #{contact.address1},
            #{contact.address2},
            #{contact.zoneId},
            #{contact.tel},
            #{contact.telValidated},
            #{contact.email},
            #{contact.emailValidated},
            #{properties.jsonStr}::jsonb,
            #{orgId},
            #{parentId},
            #{depth}
        );
    ]]></insert>

    <update id="update">
        update orgunit
        <set>
            uid = #{ownerUserId},
            gid = #{ownerGroupId},
            mode = #{accessMode},
            acl = #{acl},
            label = #{label},
            description = #{description},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            alias = #{contact.rename},
            ctprops = #{contact.properties.jsonStr}::jsonb,
            address1 = #{contact.address1},
            address2 = #{contact.address2},
            "zone" = #{contact.zoneId},
            tel = #{contact.tel},
            telok = #{contact.telValidated},
            email = #{contact.email},
            emailok = #{contact.emailValidated},
            props = #{properties.jsonStr}::jsonb,
            org = #{orgId},
            parent = #{parentId},
            "depth" = #{depth},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from orgunit
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from orgunit
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

    <update id="delete_xrefs">
        alter table lily.orgunit drop constraint orgunit_parent_fkey;
        alter table lily.personrole drop constraint personrole_ou_fkey;
        alter table violet.asset drop constraint asset_o_orgunit_fkey;
        alter table violet.asset_ou drop constraint asset_ou_owner_fkey;
        alter table violet.fabtrack drop constraint fabtrack_ou_fkey;
        alter table violet.storeodr drop constraint storeodr_ou_fkey;
    </update>

    <update id="create_xrefs">
        alter table lily.orgunit
            add constraint orgunit_parent_fkey foreign key (parent)
            references lily.orgunit (id)
            on update cascade
            on delete cascade
            ;
        alter table lily.personrole
            add constraint personrole_ou_fkey foreign key (ou)
            references lily.orgunit (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.asset
            add constraint asset_o_orgunit_fkey foreign key (o_orgunit)
            references lily.orgunit (id)
            on update cascade
            ;
        alter table violet.asset_ou
            add constraint asset_ou_owner_fkey foreign key (owner)
            references lily.orgunit (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.fabtrack
            add constraint fabtrack_ou_fkey foreign key (ou)
            references lily.orgunit (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.storeodr
            add constraint storeodr_ou_fkey foreign key (ou)
            references lily.orgunit (id)
            on update cascade
            ;
    </update>

</mapper>
