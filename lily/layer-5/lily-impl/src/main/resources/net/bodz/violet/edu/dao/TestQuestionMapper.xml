<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.violet.edu.dao.TestQuestionMapper">

    <resultMap id="objlist_map" type="net.bodz.violet.edu.TestQuestion">
        <id property="id" column="id" />
        <result property="accessMode" column="mode" />
        <result property="acl" column="acl" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="subject" column="subject" />
        <result property="rawText" column="text" />
        <result property="formArguments" column="formargs" />
        <result property="properties.jsonStr" column="props" />
        <result property="favCount" column="nfav" />
        <result property="voteCount" column="nvote" />
        <result property="hateCount" column="nhate" />
        <result property="pos" column="pos" />
        <result property="answer" column="answer" />
        <result property="ownerUserId" column="uid" />
        <result property="ownerGroupId" column="gid" />
        <result property="opId" column="op" />
        <result property="formId" column="form" />
        <result property="courseId" column="course" />
        <association property="ownerGroup" columnPrefix="ownerGroup_"
            javaType="net.bodz.lily.security.Group" 
            resultMap="net.bodz.lily.security.dao.GroupMapper.objlist_map" />
        <association property="course" columnPrefix="course_"
            javaType="net.bodz.violet.edu.Course" 
            resultMap="net.bodz.violet.edu.dao.CourseMapper.objlist_map" />
        <association property="form" columnPrefix="form_"
            javaType="net.bodz.lily.schema.FormDef" 
            resultMap="net.bodz.lily.schema.dao.FormDefMapper.objlist_map" />
        <association property="op" columnPrefix="op_"
            javaType="net.bodz.lily.security.User" 
            resultMap="net.bodz.lily.security.dao.UserMapper.objlist_map" />
        <association property="ownerUser" columnPrefix="ownerUser_"
            javaType="net.bodz.lily.security.User" 
            resultMap="net.bodz.lily.security.dao.UserMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.subject, 
            a.op, 
            a.text, 
            a.form, 
            a.formargs, 
            a.course, 
            a.props, 
            a.nfav, 
            a.nvote, 
            a.nhate, 
            a.pos, 
            a.answer, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            course.id course_id, 
            course.uid course_uid, 
            course.gid course_gid, 
            course.mode course_mode, 
            course.acl course_acl, 
            course.label course_label, 
            course.description course_description, 
            course.priority course_priority, 
            course.flags course_flags, 
            course."state" course_state, 
            course.creation course_creation, 
            course.lastmod course_lastmod, 
            course."version" course_version, 
            course.props course_props, 
            course.cat course_cat, 
            course.nfav course_nfav, 
            course.nvote course_nvote, 
            course.nhate course_nhate, 
            course.credit course_credit, 
            course.plugins course_plugins, 
            form.id form_id, 
            form.code form_code, 
            form.label form_label, 
            form.description form_description, 
            form.priority form_priority, 
            form.flags form_flags, 
            form."state" form_state, 
            form.creation form_creation, 
            form.lastmod form_lastmod, 
            form."version" form_version, 
            form."schema" form_schema, 
            form.subject form_subject, 
            form.text form_text, 
            op.id op_id, 
            op."type" op_type, 
            op."name" op_name, 
            op.label op_label, 
            op.description op_description, 
            op.priority op_priority, 
            op.flags op_flags, 
            op."state" op_state, 
            op.creation op_creation, 
            op.lastmod op_lastmod, 
            op."version" op_version, 
            op.props op_props, 
            op.gid0 op_gid0, 
            op.referer op_referer, 
            op.person op_person, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person
        from testq a
            left join lily."group" ownerGroup on a.gid = ownerGroup.id
            left join course course on a.course = course.id
            left join lily._form form on a.form = form.id
            left join lily."user" op on a.op = op.id
            left join lily."user" ownerUser on a.uid = ownerUser.id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.subject, 
            a.op, 
            a.text, 
            a.form, 
            a.formargs, 
            a.course, 
            a.props, 
            a.nfav, 
            a.nvote, 
            a.nhate, 
            a.pos, 
            a.answer, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            course.id course_id, 
            course.uid course_uid, 
            course.gid course_gid, 
            course.mode course_mode, 
            course.acl course_acl, 
            course.label course_label, 
            course.description course_description, 
            course.priority course_priority, 
            course.flags course_flags, 
            course."state" course_state, 
            course.creation course_creation, 
            course.lastmod course_lastmod, 
            course."version" course_version, 
            course.props course_props, 
            course.cat course_cat, 
            course.nfav course_nfav, 
            course.nvote course_nvote, 
            course.nhate course_nhate, 
            course.credit course_credit, 
            course.plugins course_plugins, 
            form.id form_id, 
            form.code form_code, 
            form.label form_label, 
            form.description form_description, 
            form.priority form_priority, 
            form.flags form_flags, 
            form."state" form_state, 
            form.creation form_creation, 
            form.lastmod form_lastmod, 
            form."version" form_version, 
            form."schema" form_schema, 
            form.subject form_subject, 
            form.text form_text, 
            op.id op_id, 
            op."type" op_type, 
            op."name" op_name, 
            op.label op_label, 
            op.description op_description, 
            op.priority op_priority, 
            op.flags op_flags, 
            op."state" op_state, 
            op.creation op_creation, 
            op.lastmod op_lastmod, 
            op."version" op_version, 
            op.props op_props, 
            op.gid0 op_gid0, 
            op.referer op_referer, 
            op.person op_person, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person
        from testq a
            left join lily."group" ownerGroup on a.gid = ownerGroup.id
            left join course course on a.course = course.id
            left join lily._form form on a.form = form.id
            left join lily."user" op on a.op = op.id
            left join lily."user" ownerUser on a.uid = ownerUser.id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.ownerUserId != null">and a.uid = #{m.ownerUserId}</if>
        <if test="m.ownerUserIdRange!= null">
            <if test="m.ownerUserIdRange.hasStartIncl">and a.uid >= #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasStartExcl">and a.uid > #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasEndIncl">and a.uid &lt;= #{m.ownerUserIdRange.end}</if>
            <if test="m.ownerUserIdRange.hasEndExcl">and a.uid &lt; #{m.ownerUserIdRange.end}</if>
        </if>
        <if test="m.ownerGroupId != null">and a.gid = #{m.ownerGroupId}</if>
        <if test="m.ownerGroupIdRange!= null">
            <if test="m.ownerGroupIdRange.hasStartIncl">and a.gid >= #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasStartExcl">and a.gid > #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasEndIncl">and a.gid &lt;= #{m.ownerGroupIdRange.end}</if>
            <if test="m.ownerGroupIdRange.hasEndExcl">and a.gid &lt; #{m.ownerGroupIdRange.end}</if>
        </if>
        <if test="m.accessMode != null">and a.mode = #{m.accessMode}</if>
        <if test="m.accessModeRange!= null">
            <if test="m.accessModeRange.hasStartIncl">and a.mode >= #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasStartExcl">and a.mode > #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasEndIncl">and a.mode &lt;= #{m.accessModeRange.end}</if>
            <if test="m.accessModeRange.hasEndExcl">and a.mode &lt; #{m.accessModeRange.end}</if>
        </if>
        <if test="m.acl != null">and a.acl = #{m.acl}</if>
        <if test="m.aclRange!= null">
            <if test="m.aclRange.hasStartIncl">and a.acl >= #{m.aclRange.start}</if>
            <if test="m.aclRange.hasStartExcl">and a.acl > #{m.aclRange.start}</if>
            <if test="m.aclRange.hasEndIncl">and a.acl &lt;= #{m.aclRange.end}</if>
            <if test="m.aclRange.hasEndExcl">and a.acl &lt; #{m.aclRange.end}</if>
        </if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.subject != null">and a.subject = #{m.subject}</if>
        <if test="m.subjectPattern != null">and a.subject like '${m.subjectPattern}'</if>
        <if test="m.opId != null">and a.op = #{m.opId}</if>
        <if test="m.opIdRange!= null">
            <if test="m.opIdRange.hasStartIncl">and a.op >= #{m.opIdRange.start}</if>
            <if test="m.opIdRange.hasStartExcl">and a.op > #{m.opIdRange.start}</if>
            <if test="m.opIdRange.hasEndIncl">and a.op &lt;= #{m.opIdRange.end}</if>
            <if test="m.opIdRange.hasEndExcl">and a.op &lt; #{m.opIdRange.end}</if>
        </if>
        <if test="m.rawText != null">and a.text = #{m.rawText}</if>
        <if test="m.rawTextPattern != null">and a.text like '${m.rawTextPattern}'</if>
        <if test="m.formId != null">and a.form = #{m.formId}</if>
        <if test="m.formIdRange!= null">
            <if test="m.formIdRange.hasStartIncl">and a.form >= #{m.formIdRange.start}</if>
            <if test="m.formIdRange.hasStartExcl">and a.form > #{m.formIdRange.start}</if>
            <if test="m.formIdRange.hasEndIncl">and a.form &lt;= #{m.formIdRange.end}</if>
            <if test="m.formIdRange.hasEndExcl">and a.form &lt; #{m.formIdRange.end}</if>
        </if>
        <if test="m.formArguments != null">and a.formargs = #{m.formArguments}</if>
        <if test="m.formArgumentsPattern != null">and a.formargs like '${m.formArgumentsPattern}'</if>
        <if test="m.courseId != null">and a.course = #{m.courseId}</if>
        <if test="m.courseIdRange!= null">
            <if test="m.courseIdRange.hasStartIncl">and a.course >= #{m.courseIdRange.start}</if>
            <if test="m.courseIdRange.hasStartExcl">and a.course > #{m.courseIdRange.start}</if>
            <if test="m.courseIdRange.hasEndIncl">and a.course &lt;= #{m.courseIdRange.end}</if>
            <if test="m.courseIdRange.hasEndExcl">and a.course &lt; #{m.courseIdRange.end}</if>
        </if>
        <if test="m.properties != null">and a.props = #{m.properties}</if>
        <if test="m.favCount != null">and a.nfav = #{m.favCount}</if>
        <if test="m.favCountRange!= null">
            <if test="m.favCountRange.hasStartIncl">and a.nfav >= #{m.favCountRange.start}</if>
            <if test="m.favCountRange.hasStartExcl">and a.nfav > #{m.favCountRange.start}</if>
            <if test="m.favCountRange.hasEndIncl">and a.nfav &lt;= #{m.favCountRange.end}</if>
            <if test="m.favCountRange.hasEndExcl">and a.nfav &lt; #{m.favCountRange.end}</if>
        </if>
        <if test="m.voteCount != null">and a.nvote = #{m.voteCount}</if>
        <if test="m.voteCountRange!= null">
            <if test="m.voteCountRange.hasStartIncl">and a.nvote >= #{m.voteCountRange.start}</if>
            <if test="m.voteCountRange.hasStartExcl">and a.nvote > #{m.voteCountRange.start}</if>
            <if test="m.voteCountRange.hasEndIncl">and a.nvote &lt;= #{m.voteCountRange.end}</if>
            <if test="m.voteCountRange.hasEndExcl">and a.nvote &lt; #{m.voteCountRange.end}</if>
        </if>
        <if test="m.hateCount != null">and a.nhate = #{m.hateCount}</if>
        <if test="m.hateCountRange!= null">
            <if test="m.hateCountRange.hasStartIncl">and a.nhate >= #{m.hateCountRange.start}</if>
            <if test="m.hateCountRange.hasStartExcl">and a.nhate > #{m.hateCountRange.start}</if>
            <if test="m.hateCountRange.hasEndIncl">and a.nhate &lt;= #{m.hateCountRange.end}</if>
            <if test="m.hateCountRange.hasEndExcl">and a.nhate &lt; #{m.hateCountRange.end}</if>
        </if>
        <if test="m.pos != null">and a.pos = #{m.pos}</if>
        <if test="m.posRange!= null">
            <if test="m.posRange.hasStartIncl">and a.pos >= #{m.posRange.start}</if>
            <if test="m.posRange.hasStartExcl">and a.pos > #{m.posRange.start}</if>
            <if test="m.posRange.hasEndIncl">and a.pos &lt;= #{m.posRange.end}</if>
            <if test="m.posRange.hasEndExcl">and a.pos &lt; #{m.posRange.end}</if>
        </if>
        <if test="m.answer != null">and a.answer = #{m.answer}</if>
        <if test="m.answerPattern != null">and a.answer like '${m.answerPattern}'</if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into testq(
            uid,
            gid,
            mode,
            acl,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            subject,
            op,
            text,
            form,
            formargs,
            course,
            props,
            nfav,
            nvote,
            nhate,
            pos,
            answer
        ) values(
            #{ownerUserId},
            #{ownerGroupId},
            #{accessMode},
            #{acl},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{subject},
            #{opId},
            #{rawText},
            #{formId},
            #{formArguments},
            #{courseId},
            #{properties.jsonStr}::jsonb,
            #{favCount},
            #{voteCount},
            #{hateCount},
            #{pos},
            #{answer}
        );
    ]]></insert>

    <update id="update">
        update testq
        <set>
            uid = #{ownerUserId},
            gid = #{ownerGroupId},
            mode = #{accessMode},
            acl = #{acl},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            subject = #{subject},
            op = #{opId},
            text = #{rawText},
            form = #{formId},
            formargs = #{formArguments},
            course = #{courseId},
            props = #{properties.jsonStr}::jsonb,
            nfav = #{favCount},
            nvote = #{voteCount},
            nhate = #{hateCount},
            pos = #{pos},
            answer = #{answer},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from testq
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from testq
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

</mapper>
