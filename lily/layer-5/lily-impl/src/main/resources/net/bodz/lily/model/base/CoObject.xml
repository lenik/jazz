<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper 
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co">

    <!-- Acess-control, State, Ui, Versioning -->

    <resultMap id="MAP_K" type="net.bodz.lily.model.base.CoObject">
        <id property="id" column="id" />
    </resultMap>

    <resultMap id="MAP_U" type="net.bodz.lily.model.base.CoObject" extends="MAP_K">
        <result property="codeName" column="code" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <!-- result property="comment" column="comment" / -->
    </resultMap>

    <resultMap id="MAP_V" type="net.bodz.lily.model.base.CoObject" extends="MAP_K">
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
    </resultMap>

    <resultMap id="MAP_UV" type="net.bodz.lily.model.base.CoObject" extends="MAP_U">
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
    </resultMap>

    <resultMap id="MAP_UVX" type="net.bodz.lily.model.base.CoObject" extends="MAP_UV">
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
    </resultMap>

    <resultMap id="MAP_ALL" type="net.bodz.lily.model.base.CoObject" extends="MAP_UVX">
        <result property="accessMode" column="mode" />
        <result property="acl" column="acl" />
        <association property="ownerUser" javaType="net.bodz.lily.security.User">
            <id property="id" column="uid" />
            <result property="codeName" column="uid_code" />
            <result property="label" column="uid_label" />
        </association>
        <association property="ownerGroup" javaType="net.bodz.lily.security.Group">
            <id property="id" column="gid" />
            <result property="codeName" column="gid_code" />
            <result property="label" column="gid_label" />
        </association>
    </resultMap>

    <sql id="setU">
        <if test="codeName != null">code = #{codeName},</if>
        <if test="label != null">label = #{label},</if>
        <if test="description != null">description = #{description},</if>
        <if test="comment != null">comment = #{comment},</if>
    </sql>

    <sql id="setV">
        <if test="lastModifiedDate == null">lastmod = #{lastModifiedDate},</if>
        <if test="lastModifiedDate != null">lastmod = now(),</if>
        <!-- <if test="version != null">version = #{version},</if> -->
        version = version + 1,
    </sql>

    <sql id="setS">
        priority = #{priority},
        flags = #{flags},
        state = #{state},
    </sql>

    <sql id="setA">
        <if test="ownerUser != null">uid=#{ownerUser.id},</if>
        <if test="ownerGroup != null">gid=#{ownerGroup.id},</if>
        mode=#{accessMode},
        acl=#{acl},
    </sql>

    <sql id="setUVS">
        <include refid="co.setU" />
        <include refid="co.setV" />
        <include refid="co.setS" />
    </sql>

    <sql id="setUS">
        <include refid="co.setUVS" />
    </sql>

    <sql id="setUVSA">
        <include refid="co.setUVS" />
        <include refid="co.setA" />
    </sql>

    <sql id="setUSA">
        <include refid="co.setUVSA" />
    </sql>

    <sql id="setVS">
        <include refid="co.setV" />
        <include refid="co.setS" />
    </sql>

    <sql id="setVSA">
        <include refid="co.setVS" />
        <include refid="co.setA" />
    </sql>

    <sql id="setVA">
        <include refid="co.setV" />
        <include refid="co.setA" />
    </sql>

    <sql id="modefilt">
        <if test="m.loginToken != null &amp;&amp; !m.loginToken.ignoreAcl">
            and (
            a.uid=#{m.loginToken.user.id}
            <if test="!m.loginToken.user.groupIds.empty">
                or (a.mode::bit(9) &amp; b'000100000' != b'000000000') and a.gid in
                <foreach collection="m.loginToken.user.groupIds" item="item" open="(" close=")" separator=", ">
                    #{item}
                </foreach>
            </if>
            or (a.mode::bit(9) &amp; b'000000100' != b'000000000')
            )
        </if>
    </sql>

    <sql id="filter-id">
        <if test="m.idRange != null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
    </sql>

    <sql id="filter-ui">
        <if test="m.codeName != null">and a.codeName = #{m.codeName}</if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.description != null">and a.description like '%#{m.description}%'</if>
        <if test="m.queryText != null">and (
            a.label like '%${m.queryText}%'
            or a.description like '%${m.queryText}%'
            )</if>
    </sql>

    <sql id="filter-version">
        <if test="m.creation != null">
            <if test="m.creation.hasStartIncl">and a.creation >= #{m.creation.start}</if>
            <if test="m.creation.hasStartExcl">and a.creation > #{m.creation.start}</if>
            <if test="m.creation.hasEndIncl">and a.creation &lt;= #{m.creation.end}</if>
            <if test="m.creation.hasEndExcl">and a.creation &lt; #{m.creation.end}</if>
        </if>
        <if test="m.lastmod != null">
            <if test="m.lastmod.hasStartIncl">and a.lastmod >= #{m.lastmod.start}</if>
            <if test="m.lastmod.hasStartExcl">and a.lastmod > #{m.lastmod.start}</if>
            <if test="m.lastmod.hasEndIncl">and a.lastmod &lt;= #{m.lastmod.end}</if>
            <if test="m.lastmod.hasEndExcl">and a.lastmod &lt; #{m.lastmod.end}</if>
        </if>
    </sql>

    <sql id="filter-mi">
        <if test="m.date != null">
            <if test="m.date.hasStartIncl">and a.t0 >= #{m.date.start}</if>
            <if test="m.date.hasStartExcl">and a.t0 > #{m.date.start}</if>
            <if test="m.date.hasEndIncl">and a.t0 &lt;= #{m.date.end}</if>
            <if test="m.date.hasEndExcl">and a.t0 &lt; #{m.date.end}</if>
        </if>
        <if test="m.beginTime != null">
            <if test="m.beginTime.hasStartIncl">and a.t0 >= #{m.beginTime.start}</if>
            <if test="m.beginTime.hasStartExcl">and a.t0 > #{m.beginTime.start}</if>
            <if test="m.beginTime.hasEndIncl">and a.t0 &lt;= #{m.beginTime.end}</if>
            <if test="m.beginTime.hasEndExcl">and a.t0 &lt; #{m.beginTime.end}</if>
        </if>
        <if test="m.endTime != null">
            <if test="m.endTime.hasStartIncl">and a.t1 >= #{m.endTime.start}</if>
            <if test="m.endTime.hasStartExcl">and a.t1 > #{m.endTime.start}</if>
            <if test="m.endTime.hasEndIncl">and a.t1 &lt;= #{m.endTime.end}</if>
            <if test="m.endTime.hasEndExcl">and a.t1 &lt; #{m.endTime.end}</if>
        </if>
        <if test="m.noDate">and a.t0 is null</if>
        
        <if test="m.year != null">and extract(year from a.t0)=#{m.year}</if>
        <if test="m.noYear">and a.t0 is null</if>
    </sql>

    <sql id="opts">
        <if test="opt != null">
            <if test="opt.orders != null">order by ${opt.orders}</if>
            <if test="opt.page != null">limit #{opt.page.limit} offset #{opt.page.offset}</if>
        </if>
    </sql>

</mapper>