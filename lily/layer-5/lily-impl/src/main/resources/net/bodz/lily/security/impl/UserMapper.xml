<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper 
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.security.impl.UserMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.security.User" extends="co.MAP_ALL">
        <result property="properties.jsonForm" column="props" />
        <result property="name" column="name" />
        <association property="category" javaType="net.bodz.lily.security.UserCategory">
            <id property="id" column="cat" />
            <result property="label" column="cat_label" />
        </association>
        <association property="primaryGroup" javaType="net.bodz.lily.security.Group">
            <id property="id" column="gid0" />
            <result property="name" column="g_name" />
            <result property="label" column="g_label" />
            <result property="description" column="g_description" />
            <association property="admin" javaType="net.bodz.lily.security.User">
                <id property="id" column="g_admin" />
            </association>
        </association>
    </resultMap>

    <resultMap id="objedit_map" type="net.bodz.lily.security.User" extends="objlist_map">
        <association property="runningState" javaType="net.bodz.lily.security.UserRun">
            <result property="label" column="run_label" />
            <result property="lastLoginTime" column="lastlog" />
            <result property="lastLoginIP" column="lastlogip" />
        </association>
        <collection property="groups" javaType="ArrayList" ofType="net.bodz.lily.security.Group">
            <id property="id" column="y_id" />
            <result property="name" column="y_name" />
            <result property="label" column="y_label" />
            <result property="description" column="y_description" />
            <association property="admin" javaType="net.bodz.lily.security.User">
                <id property="id" column="y_admin" />
            </association>
        </collection>
        <collection property="secrets" javaType="ArrayList" ofType="net.bodz.lily.security.UserSecret">
            <id property="id" column="s_id" />
            <result property="password" column="s_passwd" />
        </collection>
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.*,
            cat.label "cat_label",
            g.name "g_name",
            g.label "g_label",
            g.description "g_description",
            g.admin "g_admin",
            s.passwd,
            r.label "run_label",
            r.lastlog,
            r.lastlogip
        from "user" a
            left join usercat cat on a.cat = cat.id
            left join "group" g on a.gid0 = g.id
            left join usersec s on a.id = s."user"
            left join user_run r on a.id  =  r."user"
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.*,
            cat.label "cat_label",
            s.passwd,
            s.id "s_id",
            s.passwd "s_passwd",
            g.name "g_name",
            g.label "g_label",
            g.description "g_description",
            g.admin "g_admin",
            y.id "y_id",
            y.name "y_name",
            y.label "y_label",
            y.description "y_description",
            y.admin "y_admin",
            r.label "run_label",
            r.lastlog,
            r.lastlogip
        from "user" a
            left join usercat cat on a.cat = cat.id
            left join "group" g on a.gid0 = g.id
            left join group_user x on x."user" = a.id
            left join "group" y on y.id = x."group" 
            left join usersec s on a.id = s."user"
            left join user_run r on a.id = r."user"
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.categoryId != null">and a.cat = #{m.categoryId}</if>
        <if test="m.primaryGroupId != null">and a.gid0 = #{m.primaryGroupId}</if>
        <if test="m.name != null">and a.name = #{m.name}</if>
        <if test="m.password != null">and s.passwd = #{m.password}</if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
    </select>

    <select id="filter" resultMap="objedit_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
    </select>

    <select id="select" parameterType="int" resultMap="objedit_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <select id="selectByName" parameterType="String" resultMap="objedit_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.name = #{name}</if>
        </where>
    </select>

    <select id="selectByEmail" resultMap="objedit_map">
        <include refid="objedit_sql" />
        <where>
            <!-- s.emailok = true -->
            and s.email = #{email}
        </where>
    </select>

    <select id="selectByMobile" resultMap="objedit_map">
        <include refid="objedit_sql" />
        <where>
            <!-- s.telok = true -->
            and s.tel = #{mobile}
        </where>
    </select>

    <select id="findForLogin" resultMap="objedit_map">
        <include refid="objedit_sql" />
        <where>
            <if test="name != null">and a.name = #{name}</if>
            <if test="password != null">and s.passwd = #{password}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        with u as (
            insert into "user"(
                name, label, description,
                priority, flags, state,
                props,
                gid0
            ) values(
                #{name}, #{label}, #{description},
                #{priority}, #{flags}, #{state},
                #{properties.jsonForm},
                #{primaryGroup.id}
            ) returning id
        ) insert into usersec(
                "user", passwd,
                props,
                question, answer
            )
            select
                u.id, #{secret.password},
                #{secret.properties.jsonForm},
                #{secret.question}, #{secret.answer}
            from u
            returning "user" "id"; --
    ]]></insert>

    <update id="update">
        update "user"
        <set>
            <include refid="co.setUS" />
            name = #{name},
            props = #{properties.jsonForm},
            gid0 = #{primaryGroup.id},
        </set>
        <where>
            id = #{id}
        </where>;
        
        update usersec s
        <set>
            "user" = #{id},
            passwd = #{secret.password},
            props = #{secret.properties.jsonForm},
            question = #{secret.question},
            answer = #{secret.answer},
        </set>
        <where>
            s."user" = #{id}
        </where>;
    </update>

    <delete id="delete">
        delete from "user" where id = #{id}
    </delete>

    <select id="count" resultType="hashmap">
        select count(*) "rows" from "user"
    </select>

</mapper>