<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.violet.edu.dao.TestApplyMapper">

    <resultMap id="objlist_map" type="net.bodz.violet.edu.TestApply">
        <id property="id" column="id" />
        <result property="accessMode" column="mode" />
        <result property="acl" column="acl" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="beginTime" column="t0" />
        <result property="endTime" column="t1" />
        <result property="year" column="year" />
        <result property="score" column="score" />
        <result property="ownerUserId" column="uid" />
        <result property="ownerGroupId" column="gid" />
        <result property="paperId" column="paper" />
        <result property="personId" column="person" />
        <association property="person" columnPrefix="person_"
            javaType="net.bodz.lily.contact.Person" 
            resultMap="net.bodz.lily.contact.dao.PersonMapper.objlist_map" />
        <association property="ownerGroup" columnPrefix="ownerGroup_"
            javaType="net.bodz.lily.security.Group" 
            resultMap="net.bodz.lily.security.dao.GroupMapper.objlist_map" />
        <association property="paper" columnPrefix="paper_"
            javaType="net.bodz.violet.edu.TestPaper" 
            resultMap="net.bodz.violet.edu.dao.TestPaperMapper.objlist_map" />
        <association property="ownerUser" columnPrefix="ownerUser_"
            javaType="net.bodz.lily.security.User" 
            resultMap="net.bodz.lily.security.dao.UserMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.t0, 
            a.t1, 
            a."year", 
            a.paper, 
            a.person, 
            a.score, 
            person.id person_id, 
            person.uid person_uid, 
            person.gid person_gid, 
            person.mode person_mode, 
            person.acl person_acl, 
            person.label person_label, 
            person.description person_description, 
            person.priority person_priority, 
            person.flags person_flags, 
            person."state" person_state, 
            person.creation person_creation, 
            person.lastmod person_lastmod, 
            person."version" person_version, 
            person.alias person_alias, 
            person.ctprops person_ctprops, 
            person.address1 person_address1, 
            person.address2 person_address2, 
            person."zone" person_zone, 
            person.tel person_tel, 
            person.telok person_telok, 
            person.email person_email, 
            person.emailok person_emailok, 
            person.props person_props, 
            person.cat person_cat, 
            person.birthday person_birthday, 
            person.locale person_locale, 
            person.timezone person_timezone, 
            person.nrole person_nrole, 
            person.customer person_customer, 
            person.supplier person_supplier, 
            person.employee person_employee, 
            person.subject person_subject, 
            person.nbank person_nbank, 
            person.gender person_gender, 
            person.homeland person_homeland, 
            person.passport person_passport, 
            person.ssn person_ssn, 
            person.dln person_dln, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            paper.id paper_id, 
            paper.uid paper_uid, 
            paper.gid paper_gid, 
            paper.mode paper_mode, 
            paper.acl paper_acl, 
            paper.label paper_label, 
            paper.description paper_description, 
            paper.priority paper_priority, 
            paper.flags paper_flags, 
            paper."state" paper_state, 
            paper.creation paper_creation, 
            paper.lastmod paper_lastmod, 
            paper."version" paper_version, 
            paper.course paper_course, 
            paper.timeout paper_timeout, 
            paper.totalscore paper_totalscore, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person
        from testapply a
            left join lily.person person on a.person = person.id
            left join lily."group" ownerGroup on a.gid = ownerGroup.id
            left join testpaper paper on a.paper = paper.id
            left join lily."user" ownerUser on a.uid = ownerUser.id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.t0, 
            a.t1, 
            a."year", 
            a.paper, 
            a.person, 
            a.score, 
            person.id person_id, 
            person.uid person_uid, 
            person.gid person_gid, 
            person.mode person_mode, 
            person.acl person_acl, 
            person.label person_label, 
            person.description person_description, 
            person.priority person_priority, 
            person.flags person_flags, 
            person."state" person_state, 
            person.creation person_creation, 
            person.lastmod person_lastmod, 
            person."version" person_version, 
            person.alias person_alias, 
            person.ctprops person_ctprops, 
            person.address1 person_address1, 
            person.address2 person_address2, 
            person."zone" person_zone, 
            person.tel person_tel, 
            person.telok person_telok, 
            person.email person_email, 
            person.emailok person_emailok, 
            person.props person_props, 
            person.cat person_cat, 
            person.birthday person_birthday, 
            person.locale person_locale, 
            person.timezone person_timezone, 
            person.nrole person_nrole, 
            person.customer person_customer, 
            person.supplier person_supplier, 
            person.employee person_employee, 
            person.subject person_subject, 
            person.nbank person_nbank, 
            person.gender person_gender, 
            person.homeland person_homeland, 
            person.passport person_passport, 
            person.ssn person_ssn, 
            person.dln person_dln, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            paper.id paper_id, 
            paper.uid paper_uid, 
            paper.gid paper_gid, 
            paper.mode paper_mode, 
            paper.acl paper_acl, 
            paper.label paper_label, 
            paper.description paper_description, 
            paper.priority paper_priority, 
            paper.flags paper_flags, 
            paper."state" paper_state, 
            paper.creation paper_creation, 
            paper.lastmod paper_lastmod, 
            paper."version" paper_version, 
            paper.course paper_course, 
            paper.timeout paper_timeout, 
            paper.totalscore paper_totalscore, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person
        from testapply a
            left join lily.person person on a.person = person.id
            left join lily."group" ownerGroup on a.gid = ownerGroup.id
            left join testpaper paper on a.paper = paper.id
            left join lily."user" ownerUser on a.uid = ownerUser.id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.ownerUserId != null">and a.uid = #{m.ownerUserId}</if>
        <if test="m.ownerUserIdRange!= null">
            <if test="m.ownerUserIdRange.hasStartIncl">and a.uid >= #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasStartExcl">and a.uid > #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasEndIncl">and a.uid &lt;= #{m.ownerUserIdRange.end}</if>
            <if test="m.ownerUserIdRange.hasEndExcl">and a.uid &lt; #{m.ownerUserIdRange.end}</if>
        </if>
        <if test="m.ownerGroupId != null">and a.gid = #{m.ownerGroupId}</if>
        <if test="m.ownerGroupIdRange!= null">
            <if test="m.ownerGroupIdRange.hasStartIncl">and a.gid >= #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasStartExcl">and a.gid > #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasEndIncl">and a.gid &lt;= #{m.ownerGroupIdRange.end}</if>
            <if test="m.ownerGroupIdRange.hasEndExcl">and a.gid &lt; #{m.ownerGroupIdRange.end}</if>
        </if>
        <if test="m.accessMode != null">and a.mode = #{m.accessMode}</if>
        <if test="m.accessModeRange!= null">
            <if test="m.accessModeRange.hasStartIncl">and a.mode >= #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasStartExcl">and a.mode > #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasEndIncl">and a.mode &lt;= #{m.accessModeRange.end}</if>
            <if test="m.accessModeRange.hasEndExcl">and a.mode &lt; #{m.accessModeRange.end}</if>
        </if>
        <if test="m.acl != null">and a.acl = #{m.acl}</if>
        <if test="m.aclRange!= null">
            <if test="m.aclRange.hasStartIncl">and a.acl >= #{m.aclRange.start}</if>
            <if test="m.aclRange.hasStartExcl">and a.acl > #{m.aclRange.start}</if>
            <if test="m.aclRange.hasEndIncl">and a.acl &lt;= #{m.aclRange.end}</if>
            <if test="m.aclRange.hasEndExcl">and a.acl &lt; #{m.aclRange.end}</if>
        </if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.labelPattern != null">and a.label like '${m.labelPattern}'</if>
        <if test="m.description != null">and a.description = #{m.description}</if>
        <if test="m.descriptionPattern != null">and a.description like '${m.descriptionPattern}'</if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.beginTime != null">and a.t0 = #{m.beginTime}</if>
        <if test="m.endTime != null">and a.t1 = #{m.endTime}</if>
        <if test="m.year != null">and a."year" = #{m.year}</if>
        <if test="m.yearRange!= null">
            <if test="m.yearRange.hasStartIncl">and a."year" >= #{m.yearRange.start}</if>
            <if test="m.yearRange.hasStartExcl">and a."year" > #{m.yearRange.start}</if>
            <if test="m.yearRange.hasEndIncl">and a."year" &lt;= #{m.yearRange.end}</if>
            <if test="m.yearRange.hasEndExcl">and a."year" &lt; #{m.yearRange.end}</if>
        </if>
        <if test="m.paperId != null">and a.paper = #{m.paperId}</if>
        <if test="m.paperIdRange!= null">
            <if test="m.paperIdRange.hasStartIncl">and a.paper >= #{m.paperIdRange.start}</if>
            <if test="m.paperIdRange.hasStartExcl">and a.paper > #{m.paperIdRange.start}</if>
            <if test="m.paperIdRange.hasEndIncl">and a.paper &lt;= #{m.paperIdRange.end}</if>
            <if test="m.paperIdRange.hasEndExcl">and a.paper &lt; #{m.paperIdRange.end}</if>
        </if>
        <if test="m.personId != null">and a.person = #{m.personId}</if>
        <if test="m.personIdRange!= null">
            <if test="m.personIdRange.hasStartIncl">and a.person >= #{m.personIdRange.start}</if>
            <if test="m.personIdRange.hasStartExcl">and a.person > #{m.personIdRange.start}</if>
            <if test="m.personIdRange.hasEndIncl">and a.person &lt;= #{m.personIdRange.end}</if>
            <if test="m.personIdRange.hasEndExcl">and a.person &lt; #{m.personIdRange.end}</if>
        </if>
        <if test="m.score != null">and a.score = #{m.score}</if>
        <if test="m.scoreRange!= null">
            <if test="m.scoreRange.hasStartIncl">and a.score >= #{m.scoreRange.start}</if>
            <if test="m.scoreRange.hasStartExcl">and a.score > #{m.scoreRange.start}</if>
            <if test="m.scoreRange.hasEndIncl">and a.score &lt;= #{m.scoreRange.end}</if>
            <if test="m.scoreRange.hasEndExcl">and a.score &lt; #{m.scoreRange.end}</if>
        </if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into testapply(
            uid,
            gid,
            mode,
            acl,
            label,
            description,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            t0,
            t1,
            "year",
            paper,
            person,
            score
        ) values(
            #{ownerUserId},
            #{ownerGroupId},
            #{accessMode},
            #{acl},
            #{label},
            #{description},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{beginTime},
            #{endTime},
            #{year},
            #{paperId},
            #{personId},
            #{score}
        );
    ]]></insert>

    <update id="update">
        update testapply
        <set>
            uid = #{ownerUserId},
            gid = #{ownerGroupId},
            mode = #{accessMode},
            acl = #{acl},
            label = #{label},
            description = #{description},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            t0 = #{beginTime},
            t1 = #{endTime},
            "year" = #{year},
            paper = #{paperId},
            person = #{personId},
            score = #{score},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from testapply
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from testapply
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

</mapper>
