<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bodz.lily.contact.dao.PersonMapper">

    <resultMap id="objlist_map" type="net.bodz.lily.contact.Person">
        <id property="id" column="id" />
        <result property="accessMode" column="mode" />
        <result property="acl" column="acl" />
        <result property="label" column="label" />
        <result property="description" column="description" />
        <result property="priority" column="priority" />
        <result property="flags" column="flags" />
        <result property="state" column="state" />
        <result property="creationDate" column="creation" />
        <result property="lastModifiedDate" column="lastmod" />
        <result property="version" column="version" />
        <result property="contact.rename" column="alias" />
        <result property="contact.properties.jsonStr" column="ctprops" />
        <result property="contact.address1" column="address1" />
        <result property="contact.address2" column="address2" />
        <result property="contact.tel" column="tel" />
        <result property="contact.telValidated" column="telok" />
        <result property="contact.email" column="email" />
        <result property="contact.emailValidated" column="emailok" />
        <result property="properties.jsonStr" column="props" />
        <result property="birthday" column="birthday" />
        <result property="langTag" column="locale" />
        <result property="timeZoneId" column="timezone" />
        <result property="roleCount" column="nrole" />
        <result property="customer" column="customer" />
        <result property="supplier" column="supplier" />
        <result property="employee" column="employee" />
        <result property="subject" column="subject" />
        <result property="bankCount" column="nbank" />
        <result property="gender" column="gender" />
        <result property="homeland" column="homeland" />
        <result property="passport" column="passport" />
        <result property="ssn" column="ssn" />
        <result property="dln" column="dln" />
        <result property="ownerUserId" column="uid" />
        <result property="ownerGroupId" column="gid" />
        <result property="contact.zoneId" column="zone" />
        <result property="categoryId" column="cat" />
        <association property="ownerGroup" columnPrefix="ownerGroup_"
            javaType="net.bodz.lily.security.Group" 
            resultMap="net.bodz.lily.security.dao.GroupMapper.objlist_map" />
        <association property="ownerUser" columnPrefix="ownerUser_"
            javaType="net.bodz.lily.security.User" 
            resultMap="net.bodz.lily.security.dao.UserMapper.objlist_map" />
        <association property="category" columnPrefix="category_"
            javaType="net.bodz.lily.contact.PartyCategory" 
            resultMap="net.bodz.lily.contact.dao.PartyCategoryMapper.objlist_map" />
        <association property="contact.zone" columnPrefix="zone_"
            javaType="net.bodz.lily.geo.Zone" 
            resultMap="net.bodz.lily.geo.dao.ZoneMapper.objlist_map" />
    </resultMap>

    <sql id="objlist_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.alias, 
            a.ctprops, 
            a.address1, 
            a.address2, 
            a."zone", 
            a.tel, 
            a.telok, 
            a.email, 
            a.emailok, 
            a.props, 
            a.cat, 
            a.birthday, 
            a.locale, 
            a.timezone, 
            a.nrole, 
            a.customer, 
            a.supplier, 
            a.employee, 
            a.subject, 
            a.nbank, 
            a.gender, 
            a.homeland, 
            a.passport, 
            a.ssn, 
            a.dln, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person, 
            category.id category_id, 
            category."name" category_name, 
            category.uid category_uid, 
            category.gid category_gid, 
            category.mode category_mode, 
            category.acl category_acl, 
            category.label category_label, 
            category.description category_description, 
            category.priority category_priority, 
            category.flags category_flags, 
            category."state" category_state, 
            category.creation category_creation, 
            category.lastmod category_lastmod, 
            category."version" category_version, 
            category.image category_image, 
            category.imagealt category_imagealt, 
            category.props category_props, 
            category.parent category_parent, 
            category."depth" category_depth, 
            category.nref category_nref, 
            "zone".id zone_id, 
            "zone".code zone_code, 
            "zone".uid zone_uid, 
            "zone".gid zone_gid, 
            "zone".mode zone_mode, 
            "zone".acl zone_acl, 
            "zone".label zone_label, 
            "zone".description zone_description, 
            "zone".priority zone_priority, 
            "zone".flags zone_flags, 
            "zone"."state" zone_state, 
            "zone".creation zone_creation, 
            "zone".lastmod zone_lastmod, 
            "zone"."version" zone_version, 
            "zone".cat zone_cat, 
            "zone".country zone_country, 
            "zone".parent zone_parent, 
            "zone"."depth" zone_depth, 
            "zone".telcode zone_telcode, 
            "zone".postcode zone_postcode, 
            "zone".props zone_props, 
            "zone"."data" zone_data
        from person a
            left join "group" ownerGroup on a.gid = ownerGroup.id
            left join "user" ownerUser on a.uid = ownerUser.id
            left join partycat category on a.cat = category.id
            left join "zone" "zone" on a."zone" = "zone".id
        ]]>
    </sql>

    <sql id="objedit_sql"><![CDATA[
        select
            a.id, 
            a.uid, 
            a.gid, 
            a.mode, 
            a.acl, 
            a.label, 
            a.description, 
            a.priority, 
            a.flags, 
            a."state", 
            a.creation, 
            a.lastmod, 
            a."version", 
            a.alias, 
            a.ctprops, 
            a.address1, 
            a.address2, 
            a."zone", 
            a.tel, 
            a.telok, 
            a.email, 
            a.emailok, 
            a.props, 
            a.cat, 
            a.birthday, 
            a.locale, 
            a.timezone, 
            a.nrole, 
            a.customer, 
            a.supplier, 
            a.employee, 
            a.subject, 
            a.nbank, 
            a.gender, 
            a.homeland, 
            a.passport, 
            a.ssn, 
            a.dln, 
            ownerGroup.id ownerGroup_id, 
            ownerGroup."name" ownerGroup_name, 
            ownerGroup."type" ownerGroup_type, 
            ownerGroup.label ownerGroup_label, 
            ownerGroup.description ownerGroup_description, 
            ownerGroup.priority ownerGroup_priority, 
            ownerGroup.flags ownerGroup_flags, 
            ownerGroup."state" ownerGroup_state, 
            ownerGroup.creation ownerGroup_creation, 
            ownerGroup.lastmod ownerGroup_lastmod, 
            ownerGroup."version" ownerGroup_version, 
            ownerGroup.props ownerGroup_props, 
            ownerGroup.parent ownerGroup_parent, 
            ownerUser.id ownerUser_id, 
            ownerUser."type" ownerUser_type, 
            ownerUser."name" ownerUser_name, 
            ownerUser.label ownerUser_label, 
            ownerUser.description ownerUser_description, 
            ownerUser.priority ownerUser_priority, 
            ownerUser.flags ownerUser_flags, 
            ownerUser."state" ownerUser_state, 
            ownerUser.creation ownerUser_creation, 
            ownerUser.lastmod ownerUser_lastmod, 
            ownerUser."version" ownerUser_version, 
            ownerUser.props ownerUser_props, 
            ownerUser.gid0 ownerUser_gid0, 
            ownerUser.referer ownerUser_referer, 
            ownerUser.person ownerUser_person, 
            category.id category_id, 
            category."name" category_name, 
            category.uid category_uid, 
            category.gid category_gid, 
            category.mode category_mode, 
            category.acl category_acl, 
            category.label category_label, 
            category.description category_description, 
            category.priority category_priority, 
            category.flags category_flags, 
            category."state" category_state, 
            category.creation category_creation, 
            category.lastmod category_lastmod, 
            category."version" category_version, 
            category.image category_image, 
            category.imagealt category_imagealt, 
            category.props category_props, 
            category.parent category_parent, 
            category."depth" category_depth, 
            category.nref category_nref, 
            "zone".id zone_id, 
            "zone".code zone_code, 
            "zone".uid zone_uid, 
            "zone".gid zone_gid, 
            "zone".mode zone_mode, 
            "zone".acl zone_acl, 
            "zone".label zone_label, 
            "zone".description zone_description, 
            "zone".priority zone_priority, 
            "zone".flags zone_flags, 
            "zone"."state" zone_state, 
            "zone".creation zone_creation, 
            "zone".lastmod zone_lastmod, 
            "zone"."version" zone_version, 
            "zone".cat zone_cat, 
            "zone".country zone_country, 
            "zone".parent zone_parent, 
            "zone"."depth" zone_depth, 
            "zone".telcode zone_telcode, 
            "zone".postcode zone_postcode, 
            "zone".props zone_props, 
            "zone"."data" zone_data
        from person a
            left join "group" ownerGroup on a.gid = ownerGroup.id
            left join "user" ownerUser on a.uid = ownerUser.id
            left join partycat category on a.cat = category.id
            left join "zone" "zone" on a."zone" = "zone".id
        ]]>
    </sql>

    <sql id="filtconds">
        <if test="m.id != null">and a.id = #{m.id}</if>
        <if test="m.idRange!= null">
            <if test="m.idRange.hasStartIncl">and a.id >= #{m.idRange.start}</if>
            <if test="m.idRange.hasStartExcl">and a.id > #{m.idRange.start}</if>
            <if test="m.idRange.hasEndIncl">and a.id &lt;= #{m.idRange.end}</if>
            <if test="m.idRange.hasEndExcl">and a.id &lt; #{m.idRange.end}</if>
        </if>
        <if test="m.ownerUserId != null">and a.uid = #{m.ownerUserId}</if>
        <if test="m.ownerUserIdRange!= null">
            <if test="m.ownerUserIdRange.hasStartIncl">and a.uid >= #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasStartExcl">and a.uid > #{m.ownerUserIdRange.start}</if>
            <if test="m.ownerUserIdRange.hasEndIncl">and a.uid &lt;= #{m.ownerUserIdRange.end}</if>
            <if test="m.ownerUserIdRange.hasEndExcl">and a.uid &lt; #{m.ownerUserIdRange.end}</if>
        </if>
        <if test="m.ownerGroupId != null">and a.gid = #{m.ownerGroupId}</if>
        <if test="m.ownerGroupIdRange!= null">
            <if test="m.ownerGroupIdRange.hasStartIncl">and a.gid >= #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasStartExcl">and a.gid > #{m.ownerGroupIdRange.start}</if>
            <if test="m.ownerGroupIdRange.hasEndIncl">and a.gid &lt;= #{m.ownerGroupIdRange.end}</if>
            <if test="m.ownerGroupIdRange.hasEndExcl">and a.gid &lt; #{m.ownerGroupIdRange.end}</if>
        </if>
        <if test="m.accessMode != null">and a.mode = #{m.accessMode}</if>
        <if test="m.accessModeRange!= null">
            <if test="m.accessModeRange.hasStartIncl">and a.mode >= #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasStartExcl">and a.mode > #{m.accessModeRange.start}</if>
            <if test="m.accessModeRange.hasEndIncl">and a.mode &lt;= #{m.accessModeRange.end}</if>
            <if test="m.accessModeRange.hasEndExcl">and a.mode &lt; #{m.accessModeRange.end}</if>
        </if>
        <if test="m.acl != null">and a.acl = #{m.acl}</if>
        <if test="m.aclRange!= null">
            <if test="m.aclRange.hasStartIncl">and a.acl >= #{m.aclRange.start}</if>
            <if test="m.aclRange.hasStartExcl">and a.acl > #{m.aclRange.start}</if>
            <if test="m.aclRange.hasEndIncl">and a.acl &lt;= #{m.aclRange.end}</if>
            <if test="m.aclRange.hasEndExcl">and a.acl &lt; #{m.aclRange.end}</if>
        </if>
        <if test="m.label != null">and a.label = #{m.label}</if>
        <if test="m.labelPattern != null">and a.label like '${m.labelPattern}'</if>
        <if test="m.description != null">and a.description = #{m.description}</if>
        <if test="m.descriptionPattern != null">and a.description like '${m.descriptionPattern}'</if>
        <if test="m.priority != null">and a.priority = #{m.priority}</if>
        <if test="m.priorityRange!= null">
            <if test="m.priorityRange.hasStartIncl">and a.priority >= #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasStartExcl">and a.priority > #{m.priorityRange.start}</if>
            <if test="m.priorityRange.hasEndIncl">and a.priority &lt;= #{m.priorityRange.end}</if>
            <if test="m.priorityRange.hasEndExcl">and a.priority &lt; #{m.priorityRange.end}</if>
        </if>
        <if test="m.flags != null">and a.flags = #{m.flags}</if>
        <if test="m.flagsRange!= null">
            <if test="m.flagsRange.hasStartIncl">and a.flags >= #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasStartExcl">and a.flags > #{m.flagsRange.start}</if>
            <if test="m.flagsRange.hasEndIncl">and a.flags &lt;= #{m.flagsRange.end}</if>
            <if test="m.flagsRange.hasEndExcl">and a.flags &lt; #{m.flagsRange.end}</if>
        </if>
        <if test="m.state != null">and a."state" = #{m.state}</if>
        <if test="m.stateRange!= null">
            <if test="m.stateRange.hasStartIncl">and a."state" >= #{m.stateRange.start}</if>
            <if test="m.stateRange.hasStartExcl">and a."state" > #{m.stateRange.start}</if>
            <if test="m.stateRange.hasEndIncl">and a."state" &lt;= #{m.stateRange.end}</if>
            <if test="m.stateRange.hasEndExcl">and a."state" &lt; #{m.stateRange.end}</if>
        </if>
        <if test="m.creationDate != null">and a.creation = #{m.creationDate}</if>
        <if test="m.lastModifiedDate != null">and a.lastmod = #{m.lastModifiedDate}</if>
        <if test="m.version != null">and a."version" = #{m.version}</if>
        <if test="m.versionRange!= null">
            <if test="m.versionRange.hasStartIncl">and a."version" >= #{m.versionRange.start}</if>
            <if test="m.versionRange.hasStartExcl">and a."version" > #{m.versionRange.start}</if>
            <if test="m.versionRange.hasEndIncl">and a."version" &lt;= #{m.versionRange.end}</if>
            <if test="m.versionRange.hasEndExcl">and a."version" &lt; #{m.versionRange.end}</if>
        </if>
        <if test="m.contact.rename != null">and a.alias = #{m.contact.rename}</if>
        <if test="m.contact.renamePattern != null">and a.alias like '${m.contact.renamePattern}'</if>
        <if test="m.contact.properties != null">and a.ctprops = #{m.contact.properties}</if>
        <if test="m.contact.address1 != null">and a.address1 = #{m.contact.address1}</if>
        <if test="m.contact.address1Pattern != null">and a.address1 like '${m.contact.address1Pattern}'</if>
        <if test="m.contact.address2 != null">and a.address2 = #{m.contact.address2}</if>
        <if test="m.contact.address2Pattern != null">and a.address2 like '${m.contact.address2Pattern}'</if>
        <if test="m.contact.zoneId != null">and a."zone" = #{m.contact.zoneId}</if>
        <if test="m.contact.zoneIdRange!= null">
            <if test="m.contact.zoneIdRange.hasStartIncl">and a."zone" >= #{m.contact.zoneIdRange.start}</if>
            <if test="m.contact.zoneIdRange.hasStartExcl">and a."zone" > #{m.contact.zoneIdRange.start}</if>
            <if test="m.contact.zoneIdRange.hasEndIncl">and a."zone" &lt;= #{m.contact.zoneIdRange.end}</if>
            <if test="m.contact.zoneIdRange.hasEndExcl">and a."zone" &lt; #{m.contact.zoneIdRange.end}</if>
        </if>
        <if test="m.contact.tel != null">and a.tel = #{m.contact.tel}</if>
        <if test="m.contact.telPattern != null">and a.tel like '${m.contact.telPattern}'</if>
        <if test="m.contact.telValidated != null">and a.telok = #{m.contact.telValidated}</if>
        <if test="m.contact.email != null">and a.email = #{m.contact.email}</if>
        <if test="m.contact.emailPattern != null">and a.email like '${m.contact.emailPattern}'</if>
        <if test="m.contact.emailValidated != null">and a.emailok = #{m.contact.emailValidated}</if>
        <if test="m.properties != null">and a.props = #{m.properties}</if>
        <if test="m.categoryId != null">and a.cat = #{m.categoryId}</if>
        <if test="m.categoryIdRange!= null">
            <if test="m.categoryIdRange.hasStartIncl">and a.cat >= #{m.categoryIdRange.start}</if>
            <if test="m.categoryIdRange.hasStartExcl">and a.cat > #{m.categoryIdRange.start}</if>
            <if test="m.categoryIdRange.hasEndIncl">and a.cat &lt;= #{m.categoryIdRange.end}</if>
            <if test="m.categoryIdRange.hasEndExcl">and a.cat &lt; #{m.categoryIdRange.end}</if>
        </if>
        <if test="m.birthday != null">and a.birthday = #{m.birthday}</if>
        <if test="m.birthdayRange!= null">
            <if test="m.birthdayRange.hasStartIncl">and a.birthday >= #{m.birthdayRange.start}</if>
            <if test="m.birthdayRange.hasStartExcl">and a.birthday > #{m.birthdayRange.start}</if>
            <if test="m.birthdayRange.hasEndIncl">and a.birthday &lt;= #{m.birthdayRange.end}</if>
            <if test="m.birthdayRange.hasEndExcl">and a.birthday &lt; #{m.birthdayRange.end}</if>
        </if>
        <if test="m.langTag != null">and a.locale = #{m.langTag}</if>
        <if test="m.langTagPattern != null">and a.locale like '${m.langTagPattern}'</if>
        <if test="m.timeZone != null">and a.timezone = #{m.timeZone}</if>
        <if test="m.timeZonePattern != null">and a.timezone like '${m.timeZonePattern}'</if>
        <if test="m.roleCount != null">and a.nrole = #{m.roleCount}</if>
        <if test="m.roleCountRange!= null">
            <if test="m.roleCountRange.hasStartIncl">and a.nrole >= #{m.roleCountRange.start}</if>
            <if test="m.roleCountRange.hasStartExcl">and a.nrole > #{m.roleCountRange.start}</if>
            <if test="m.roleCountRange.hasEndIncl">and a.nrole &lt;= #{m.roleCountRange.end}</if>
            <if test="m.roleCountRange.hasEndExcl">and a.nrole &lt; #{m.roleCountRange.end}</if>
        </if>
        <if test="m.customer != null">and a.customer = #{m.customer}</if>
        <if test="m.supplier != null">and a.supplier = #{m.supplier}</if>
        <if test="m.employee != null">and a.employee = #{m.employee}</if>
        <if test="m.subject != null">and a.subject = #{m.subject}</if>
        <if test="m.subjectPattern != null">and a.subject like '${m.subjectPattern}'</if>
        <if test="m.bankCount != null">and a.nbank = #{m.bankCount}</if>
        <if test="m.bankCountRange!= null">
            <if test="m.bankCountRange.hasStartIncl">and a.nbank >= #{m.bankCountRange.start}</if>
            <if test="m.bankCountRange.hasStartExcl">and a.nbank > #{m.bankCountRange.start}</if>
            <if test="m.bankCountRange.hasEndIncl">and a.nbank &lt;= #{m.bankCountRange.end}</if>
            <if test="m.bankCountRange.hasEndExcl">and a.nbank &lt; #{m.bankCountRange.end}</if>
        </if>
        <if test="m.gender != null">and a.gender = #{m.gender}</if>
        <if test="m.genderPattern != null">and a.gender like '${m.genderPattern}'</if>
        <if test="m.homeland != null">and a.homeland = #{m.homeland}</if>
        <if test="m.homelandPattern != null">and a.homeland like '${m.homelandPattern}'</if>
        <if test="m.passport != null">and a.passport = #{m.passport}</if>
        <if test="m.passportPattern != null">and a.passport like '${m.passportPattern}'</if>
        <if test="m.ssn != null">and a.ssn = #{m.ssn}</if>
        <if test="m.ssnPattern != null">and a.ssn like '${m.ssnPattern}'</if>
        <if test="m.dln != null">and a.dln = #{m.dln}</if>
        <if test="m.dlnPattern != null">and a.dln like '${m.dlnPattern}'</if>
    </sql>

    <select id="all" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <include refid="co.opts" />
    </select>

    <select id="filter" resultMap="objlist_map">
        <include refid="objlist_sql" />
        <where>
            <include refid="filtconds" />
        </where>
        <include refid="co.opts" />
    </select>

    <select id="select" resultMap="objlist_map">
        <include refid="objedit_sql" />
        <where>
            <if test="_parameter != null">a.id = #{id}</if>
        </where>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"><![CDATA[
        insert into person(
            uid,
            gid,
            mode,
            acl,
            label,
            description,
            priority,
            flags,
            "state",
            creation,
            lastmod,
            "version",
            alias,
            ctprops,
            address1,
            address2,
            "zone",
            tel,
            telok,
            email,
            emailok,
            props,
            cat,
            birthday,
            locale,
            timezone,
            nrole,
            customer,
            supplier,
            employee,
            subject,
            nbank,
            gender,
            homeland,
            passport,
            ssn,
            dln
        ) values(
            #{ownerUserId},
            #{ownerGroupId},
            #{accessMode},
            #{acl},
            #{label},
            #{description},
            #{priority},
            #{flags},
            #{state},
            #{creationDate},
            #{lastModifiedDate},
            #{version},
            #{contact.rename},
            #{contact.properties.jsonStr}::jsonb,
            #{contact.address1},
            #{contact.address2},
            #{contact.zoneId},
            #{contact.tel},
            #{contact.telValidated},
            #{contact.email},
            #{contact.emailValidated},
            #{properties.jsonStr}::jsonb,
            #{categoryId},
            #{birthday},
            #{langTag},
            #{timeZone},
            #{roleCount},
            #{customer},
            #{supplier},
            #{employee},
            #{subject},
            #{bankCount},
            #{gender},
            #{homeland},
            #{passport},
            #{ssn},
            #{dln}
        );
    ]]></insert>

    <update id="update">
        update person
        <set>
            uid = #{ownerUserId},
            gid = #{ownerGroupId},
            mode = #{accessMode},
            acl = #{acl},
            label = #{label},
            description = #{description},
            priority = #{priority},
            flags = #{flags},
            "state" = #{state},
            creation = #{creationDate},
            lastmod = #{lastModifiedDate},
            "version" = #{version},
            alias = #{contact.rename},
            ctprops = #{contact.properties.jsonStr}::jsonb,
            address1 = #{contact.address1},
            address2 = #{contact.address2},
            "zone" = #{contact.zoneId},
            tel = #{contact.tel},
            telok = #{contact.telValidated},
            email = #{contact.email},
            emailok = #{contact.emailValidated},
            props = #{properties.jsonStr}::jsonb,
            cat = #{categoryId},
            birthday = #{birthday},
            locale = #{langTag},
            timezone = #{timeZone},
            nrole = #{roleCount},
            customer = #{customer},
            supplier = #{supplier},
            employee = #{employee},
            subject = #{subject},
            nbank = #{bankCount},
            gender = #{gender},
            homeland = #{homeland},
            passport = #{passport},
            ssn = #{ssn},
            dln = #{dln},
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <delete id="delete">
        delete from person
        <where>
            id = #{id}
        </where>
    </delete>

    <select id="count" resultType="long">
        select count(*) "rows" from person
        <where>
            <if test="_parameter != null">
                <include refid="filtconds" />
            </if>
        </where>
    </select>

    <update id="delete_xrefs">
        alter table lily.personrole drop constraint personrole_person_fkey;
        alter table lily."user" drop constraint user_person_fkey;
        alter table violet.asset drop constraint asset_o_person_fkey;
        alter table violet.asset_person drop constraint asset_person_owner_fkey;
        alter table violet.diary_party drop constraint diary_party_person_fkey;
        alter table violet.fabodr drop constraint fabodr_clerk_fkey;
        alter table violet.fabodr drop constraint fabodr_custom_fkey;
        alter table violet.fabtrack_op drop constraint fabtrack_op_person_fkey;
        alter table violet.issue_party drop constraint issue_party_person_fkey;
        alter table violet.plan_party drop constraint plan_party_person_fkey;
        alter table violet.plando_party drop constraint plando_party_person_fkey;
        alter table violet.saleodr drop constraint saleodr_customer_fkey;
        alter table violet.storeodr drop constraint storeodr_person_fkey;
        alter table violet.testapply drop constraint testapply_person_fkey;
    </update>

    <update id="create_xrefs">
        alter table lily.personrole
            add constraint personrole_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            on delete cascade
            ;
        alter table lily."user"
            add constraint user_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.asset
            add constraint asset_o_person_fkey foreign key (o_person)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.asset_person
            add constraint asset_person_owner_fkey foreign key (owner)
            references lily.person (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.diary_party
            add constraint diary_party_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.fabodr
            add constraint fabodr_clerk_fkey foreign key (clerk)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.fabodr
            add constraint fabodr_custom_fkey foreign key (custom)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.fabtrack_op
            add constraint fabtrack_op_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.issue_party
            add constraint issue_party_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            on delete set null
            ;
        alter table violet.plan_party
            add constraint plan_party_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            on delete set null
            ;
        alter table violet.plando_party
            add constraint plando_party_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            on delete cascade
            ;
        alter table violet.saleodr
            add constraint saleodr_customer_fkey foreign key (customer)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.storeodr
            add constraint storeodr_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            ;
        alter table violet.testapply
            add constraint testapply_person_fkey foreign key (person)
            references lily.person (id)
            on update cascade
            ;
    </update>

</mapper>
