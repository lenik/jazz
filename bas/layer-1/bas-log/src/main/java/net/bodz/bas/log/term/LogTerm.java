package net.bodz.bas.log.term;

import net.bodz.bas.log.term.LogTermTest;

/**
 * @test {@link LogTermTest}
 */
public abstract class LogTerm {

    public static final int USER = -4;
    public static final int FATAL = -3;
    public static final int ERROR = -2;
    public static final int WARN = -1;
    public static final int MESG = 0;
    public static final int INFO = 1;
    public static final int DETAIL = 2;
    public static final int DEBUG = 3;
    public static final int TRACE = 4;

    /** max level logged */
    private int level = INFO;

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    /**
     * @return must be non-<code>null</code>.
     */
    public abstract ITerminal filter(int level);

    /**
     * Generated by {@link LogTermTest#generate(String[])}
     */
    static String generator = "class net.bodz.bas.util.LogTermTest";

    public boolean showFatal() {
        return level >= FATAL;
    }

    public ITerminal fatal() {
        if (level >= FATAL)
            return filter(FATAL);
        return Terminals.nil;
    }

    public void fatal(Object o) {
        if (level >= FATAL)
            fatal().p(o);
    }

    public void fatal_(Object o) {
        if (level >= FATAL)
            fatal().p_(o);
    }

    public void fatal(Object... args) {
        if (level >= FATAL)
            fatal().p(args);
    }

    public void fatal_(Object... args) {
        if (level >= FATAL)
            fatal().p_(args);
    }

    public void fatalf(String format, Object... args) {
        if (level >= FATAL)
            fatal().f(format, args);
    }

    public boolean showError() {
        return level >= ERROR;
    }

    public ITerminal error() {
        if (level >= ERROR)
            return filter(ERROR);
        return Terminals.nil;
    }

    public void error(Object o) {
        if (level >= ERROR)
            error().p(o);
    }

    public void error_(Object o) {
        if (level >= ERROR)
            error().p_(o);
    }

    public void error(Object... args) {
        if (level >= ERROR)
            error().p(args);
    }

    public void error_(Object... args) {
        if (level >= ERROR)
            error().p_(args);
    }

    public void errorf(String format, Object... args) {
        if (level >= ERROR)
            error().f(format, args);
    }

    public boolean showUser() {
        return level >= USER;
    }

    public ITerminal user() {
        if (level >= USER)
            return filter(USER);
        return Terminals.nil;
    }

    public void user(Object o) {
        if (level >= USER)
            user().p(o);
    }

    public void user_(Object o) {
        if (level >= USER)
            user().p_(o);
    }

    public void user(Object... args) {
        if (level >= USER)
            user().p(args);
    }

    public void user_(Object... args) {
        if (level >= USER)
            user().p_(args);
    }

    public void userf(String format, Object... args) {
        if (level >= USER)
            user().f(format, args);
    }

    public boolean showWarn() {
        return level >= WARN;
    }

    public ITerminal warn() {
        if (level >= WARN)
            return filter(WARN);
        return Terminals.nil;
    }

    public void warn(Object o) {
        if (level >= WARN)
            warn().p(o);
    }

    public void warn_(Object o) {
        if (level >= WARN)
            warn().p_(o);
    }

    public void warn(Object... args) {
        if (level >= WARN)
            warn().p(args);
    }

    public void warn_(Object... args) {
        if (level >= WARN)
            warn().p_(args);
    }

    public void warnf(String format, Object... args) {
        if (level >= WARN)
            warn().f(format, args);
    }

    public boolean showMesg() {
        return level >= MESG;
    }

    public ITerminal mesg() {
        if (level >= MESG)
            return filter(MESG);
        return Terminals.nil;
    }

    public void mesg(Object o) {
        if (level >= MESG)
            mesg().p(o);
    }

    public void mesg_(Object o) {
        if (level >= MESG)
            mesg().p_(o);
    }

    public void mesg(Object... args) {
        if (level >= MESG)
            mesg().p(args);
    }

    public void mesg_(Object... args) {
        if (level >= MESG)
            mesg().p_(args);
    }

    public void mesgf(String format, Object... args) {
        if (level >= MESG)
            mesg().f(format, args);
    }

    public boolean showInfo() {
        return level >= INFO;
    }

    public ITerminal info() {
        if (level >= INFO)
            return filter(INFO);
        return Terminals.nil;
    }

    public void info(Object o) {
        if (level >= INFO)
            info().p(o);
    }

    public void info_(Object o) {
        if (level >= INFO)
            info().p_(o);
    }

    public void info(Object... args) {
        if (level >= INFO)
            info().p(args);
    }

    public void info_(Object... args) {
        if (level >= INFO)
            info().p_(args);
    }

    public void infof(String format, Object... args) {
        if (level >= INFO)
            info().f(format, args);
    }

    public boolean showDetail() {
        return level >= DETAIL;
    }

    public ITerminal detail() {
        if (level >= DETAIL)
            return filter(DETAIL);
        return Terminals.nil;
    }

    public void detail(Object o) {
        if (level >= DETAIL)
            detail().p(o);
    }

    public void detail_(Object o) {
        if (level >= DETAIL)
            detail().p_(o);
    }

    public void detail(Object... args) {
        if (level >= DETAIL)
            detail().p(args);
    }

    public void detail_(Object... args) {
        if (level >= DETAIL)
            detail().p_(args);
    }

    public void detailf(String format, Object... args) {
        if (level >= DETAIL)
            detail().f(format, args);
    }

    public boolean showDebug() {
        return level >= DEBUG;
    }

    public ITerminal debug() {
        if (level >= DEBUG)
            return filter(DEBUG);
        return Terminals.nil;
    }

    public void debug(Object o) {
        if (level >= DEBUG)
            debug().p(o);
    }

    public void debug_(Object o) {
        if (level >= DEBUG)
            debug().p_(o);
    }

    public void debug(Object... args) {
        if (level >= DEBUG)
            debug().p(args);
    }

    public void debug_(Object... args) {
        if (level >= DEBUG)
            debug().p_(args);
    }

    public void debugf(String format, Object... args) {
        if (level >= DEBUG)
            debug().f(format, args);
    }

    public boolean showTrace() {
        return level >= TRACE;
    }

    public ITerminal trace() {
        if (level >= TRACE)
            return filter(TRACE);
        return Terminals.nil;
    }

    public void trace(Object o) {
        if (level >= TRACE)
            trace().p(o);
    }

    public void trace_(Object o) {
        if (level >= TRACE)
            trace().p_(o);
    }

    public void trace(Object... args) {
        if (level >= TRACE)
            trace().p(args);
    }

    public void trace_(Object... args) {
        if (level >= TRACE)
            trace().p_(args);
    }

    public void tracef(String format, Object... args) {
        if (level >= TRACE)
            trace().f(format, args);
    }

}
