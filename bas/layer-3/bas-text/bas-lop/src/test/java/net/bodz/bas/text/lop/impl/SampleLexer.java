/* The following code was generated by JFlex 1.4.3 on 09-9-14 ����6:05 */

package net.bodz.bas.text.lop.impl;

import net.bodz.bas.util.exception.ParseException;

@SuppressWarnings("unused")
/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09-9-14 ����6:05 from the specification file
 * <tt>SampleLexer.l</tt>
 */
public class SampleLexer
        extends JFlexLexer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int QQ_STRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state
     * in the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a
     * non negative integer
     */
    private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\24"
            + "\1\6\3\0\1\25\2\0\1\5\1\20\1\0\1\14\1\16\1\4" + "\1\7\7\10\2\11\7\0\5\13\1\21\5\22\1\15\13\22\1\12"
            + "\2\22\1\0\1\26\2\0\1\22\1\0\4\13\1\17\1\21\5\22" + "\1\15\1\22\1\30\3\22\1\31\1\22\1\27\3\22\1\12\2\22"
            + "\57\0\1\22\12\0\1\22\4\0\1\22\5\0\27\22\1\0\37\22"
            + "\1\0\u013f\22\31\0\162\22\4\0\14\22\16\0\5\22\11\0\1\22"
            + "\213\0\1\22\13\0\1\22\1\0\3\22\1\0\1\22\1\0\24\22"
            + "\1\0\54\22\1\0\46\22\1\0\5\22\4\0\202\22\10\0\105\22"
            + "\1\0\46\22\2\0\2\22\6\0\20\22\41\0\46\22\2\0\1\22"
            + "\7\0\47\22\110\0\33\22\5\0\3\22\56\0\32\22\5\0\13\22"
            + "\25\0\12\23\4\0\2\22\1\0\143\22\1\0\1\22\17\0\2\22"
            + "\7\0\2\22\12\23\3\22\2\0\1\22\20\0\1\22\1\0\36\22"
            + "\35\0\3\22\60\0\46\22\13\0\1\22\u0152\0\66\22\3\0\1\22"
            + "\22\0\1\22\7\0\12\22\4\0\12\23\25\0\10\22\2\0\2\22" + "\2\0\26\22\1\0\7\22\1\0\1\22\3\0\4\22\3\0\1\22"
            + "\36\0\2\22\1\0\3\22\4\0\12\23\2\22\23\0\6\22\4\0" + "\2\22\2\0\26\22\1\0\7\22\1\0\2\22\1\0\2\22\1\0"
            + "\2\22\37\0\4\22\1\0\1\22\7\0\12\23\2\0\3\22\20\0" + "\11\22\1\0\3\22\1\0\26\22\1\0\7\22\1\0\2\22\1\0"
            + "\5\22\3\0\1\22\22\0\1\22\17\0\2\22\4\0\12\23\25\0" + "\10\22\2\0\2\22\2\0\26\22\1\0\7\22\1\0\2\22\1\0"
            + "\5\22\3\0\1\22\36\0\2\22\1\0\3\22\4\0\12\23\1\0" + "\1\22\21\0\1\22\1\0\6\22\3\0\3\22\1\0\4\22\3\0"
            + "\2\22\1\0\1\22\1\0\2\22\3\0\2\22\3\0\3\22\3\0" + "\10\22\1\0\3\22\55\0\11\23\25\0\10\22\1\0\3\22\1\0"
            + "\27\22\1\0\12\22\1\0\5\22\46\0\2\22\4\0\12\23\25\0" + "\10\22\1\0\3\22\1\0\27\22\1\0\12\22\1\0\5\22\3\0"
            + "\1\22\40\0\1\22\1\0\2\22\4\0\12\23\25\0\10\22\1\0"
            + "\3\22\1\0\27\22\1\0\20\22\46\0\2\22\4\0\12\23\25\0"
            + "\22\22\3\0\30\22\1\0\11\22\1\0\1\22\2\0\7\22\72\0"
            + "\60\22\1\0\2\22\14\0\7\22\11\0\12\23\47\0\2\22\1\0" + "\1\22\2\0\2\22\1\0\1\22\2\0\1\22\6\0\4\22\1\0"
            + "\7\22\1\0\3\22\1\0\1\22\1\0\1\22\2\0\2\22\1\0" + "\4\22\1\0\2\22\11\0\1\22\2\0\5\22\1\0\1\22\11\0"
            + "\12\23\2\0\2\22\42\0\1\22\37\0\12\23\26\0\10\22\1\0"
            + "\42\22\35\0\4\22\164\0\42\22\1\0\5\22\1\0\2\22\25\0"
            + "\12\23\6\0\6\22\112\0\46\22\12\0\51\22\7\0\132\22\5\0"
            + "\104\22\5\0\122\22\6\0\7\22\1\0\77\22\1\0\1\22\1\0" + "\4\22\2\0\7\22\1\0\1\22\1\0\4\22\2\0\47\22\1\0"
            + "\1\22\1\0\4\22\2\0\37\22\1\0\1\22\1\0\4\22\2\0" + "\7\22\1\0\1\22\1\0\4\22\2\0\7\22\1\0\7\22\1\0"
            + "\27\22\1\0\37\22\1\0\1\22\1\0\4\22\2\0\7\22\1\0"
            + "\47\22\1\0\23\22\16\0\11\23\56\0\125\22\14\0\u026c\22\2\0"
            + "\10\22\12\0\32\22\5\0\113\22\25\0\15\22\1\0\4\22\16\0"
            + "\22\22\16\0\22\22\16\0\15\22\1\0\3\22\17\0\64\22\43\0"
            + "\1\22\4\0\1\22\3\0\12\23\46\0\12\23\6\0\130\22\10\0"
            + "\51\22\127\0\35\22\51\0\12\23\36\22\2\0\5\22\u038b\0\154\22"
            + "\224\0\234\22\4\0\132\22\6\0\26\22\2\0\6\22\2\0\46\22"
            + "\2\0\6\22\2\0\10\22\1\0\1\22\1\0\1\22\1\0\1\22" + "\1\0\37\22\2\0\65\22\1\0\7\22\1\0\1\22\3\0\3\22"
            + "\1\0\7\22\3\0\4\22\2\0\6\22\4\0\15\22\5\0\3\22" + "\1\0\7\22\164\0\1\22\15\0\1\22\202\0\1\22\4\0\1\22"
            + "\2\0\12\22\1\0\1\22\3\0\5\22\6\0\1\22\1\0\1\22" + "\1\0\1\22\1\0\4\22\1\0\3\22\1\0\7\22\3\0\3\22"
            + "\5\0\5\22\u0ebb\0\2\22\52\0\5\22\5\0\2\22\4\0\126\22"
            + "\6\0\3\22\1\0\132\22\1\0\4\22\5\0\50\22\4\0\136\22"
            + "\21\0\30\22\70\0\20\22\u0200\0\u19b6\22\112\0\u51a6\22\132\0\u048d\22"
            + "\u0773\0\u2ba4\22\u215c\0\u012e\22\2\0\73\22\225\0\7\22\14\0\5\22"
            + "\5\0\1\22\1\0\12\22\1\0\15\22\1\0\5\22\1\0\1\22"
            + "\1\0\2\22\1\0\2\22\1\0\154\22\41\0\u016b\22\22\0\100\22"
            + "\2\0\66\22\50\0\14\22\164\0\5\22\1\0\207\22\23\0\12\23"
            + "\7\0\32\22\6\0\32\22\13\0\131\22\3\0\6\22\2\0\6\22" + "\2\0\6\22\2\0\3\22\43\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\1\2\2\1\2\3\1\4\2\1\1\5"
            + "\1\6\1\7\3\0\2\2\1\3\2\0\1\10\1\11" + "\3\0\1\12\1\13\1\14\1\15\1\16\1\0\1\3" + "\1\17\4\0\1\3\1\11\5\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[46];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"
            + "\0\320\0\352\0\u0104\0\64\0\u011e\0\64\0\u0138\0\202"
            + "\0\u0152\0\202\0\64\0\u016c\0\u0186\0\u01a0\0\u01ba\0\u01d4"
            + "\0\u01ee\0\u0208\0\u0104\0\64\0\64\0\64\0\64\0\64"
            + "\0\u0222\0\u023c\0\64\0\u0256\0\u0270\0\u028a\0\u02a4\0\u02be"
            + "\0\u02d8\0\u02f2\0\u030c\0\u01ba\0\u0326\0\u0340";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[46];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\3\3\4\1\5\1\3\1\6\1\7\2\10\2\11"
            + "\1\12\1\11\1\13\1\11\1\3\2\11\1\3\1\14" + "\2\3\3\11\1\15\2\0\21\15\1\16\1\0\1\17"
            + "\3\15\33\0\3\4\32\0\1\20\1\21\24\0\1\20" + "\1\22\1\23\27\20\7\0\2\24\1\25\1\26\2\0"
            + "\1\27\1\30\1\31\21\0\3\10\3\0\1\27\1\30" + "\1\31\21\0\5\11\1\0\1\11\1\0\1\11\1\0"
            + "\3\11\3\0\3\11\7\0\1\7\2\10\2\0\1\32" + "\1\0\1\33\22\0\3\30\20\0\1\15\2\0\21\15"
            + "\3\0\3\15\24\0\1\34\1\0\1\35\1\36\1\37" + "\1\40\32\41\7\0\2\24\1\25\3\0\1\27\1\30"
            + "\1\31\21\0\3\25\4\0\1\30\22\0\3\42\1\0" + "\1\42\3\0\1\42\1\0\1\42\27\0\1\31\21\0"
            + "\3\30\5\0\1\31\1\0\1\43\24\0\1\44\3\0" + "\1\44\20\0\1\45\2\46\20\0\5\41\1\47\24\41"
            + "\7\0\3\42\1\0\1\42\1\0\1\27\1\0\1\50" + "\1\0\1\42\17\0\3\51\27\0\2\52\1\0\1\53"
            + "\2\0\1\54\1\0\1\31\21\0\3\46\3\0\1\54" + "\1\0\1\31\12\0\4\41\1\23\1\47\24\41\7\0"
            + "\3\42\1\0\1\42\1\44\1\27\1\0\1\50\1\44" + "\1\42\17\0\3\51\7\0\1\43\17\0\2\52\4\0"
            + "\1\54\1\0\1\31\21\0\3\55\1\0\1\55\3\0" + "\1\55\1\0\1\55\17\0\3\55\1\0\1\55\1\0"
            + "\1\54\1\0\1\56\1\0\1\55\17\0\3\55\1\0" + "\1\55\1\44\1\54\1\0\1\56\1\44\1\55\10\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[858];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
            "Error: pushback value was too large" };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\10\1\1\11\1\1\1\11\3\0\1\1"
            + "\1\11\1\1\2\0\2\1\3\0\5\11\1\0\1\1" + "\1\11\4\0\2\1\5\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[46];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from input
     */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    public static final int ID = 300;
    public static final int NUMBER = 301;
    public static final int STRING = 302;

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this constructor.
     * 
     * @param in
     *            the java.io.Reader to read input from.
     */
    public SampleLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this constructor.
     * 
     * @param in
     *            the java.io.Inputstream to read input from.
     */
    public SampleLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     * 
     * @param packed
     *            the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0; /* index in packed string */
        int j = 0; /* index in unpacked array */
        while (i < 1270) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     * 
     * @return <code>false</code>, iff there was new input.
     * 
     * @exception java.io.IOException
     *                if any I/O-Error occurs
     */
    private boolean zzRefill()
            throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose()
            throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the old reader.
     * 
     * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * 
     * @param reader
     *            the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     * 
     * @param newState
     *            the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * 
     * It is equivalent to yytext().charAt(pos), but faster
     * 
     * @param pos
     *            the position of the character to fetch. A value from 0 to yylength()-1.
     * 
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * 
     * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback
     * rule) this method will only be called with things that "Can't Possibly Happen". If this
     * method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner
     * etc.).
     * 
     * Usual syntax/scanner level error handling should be done in error fallback rules.
     * 
     * @param errorCode
     *            the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * 
     * They will be read again by then next call of the scanning method
     * 
     * @param number
     *            the number of characters to be read again. This number must not be greater than
     *            yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end of file is reached
     */
    private void zzDoEOF()
            throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is
     * encountered or an I/O-Error occurs.
     * 
     * @return the next token
     * @exception java.io.IOException
     *                if any I/O-Error occurs
     */
    public int yylex()
            throws java.io.IOException, ParseException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                case '\u000B':
                case '\u000C':
                case '\u0085':
                case '\u2028':
                case '\u2029':
                    yyline++;
                    yycolumn = 0;
                    zzR = false;
                    break;
                case '\r':
                    yyline++;
                    yycolumn = 0;
                    zzR = true;
                    break;
                case '\n':
                    if (zzR)
                        zzR = false;
                    else {
                        yyline++;
                        yycolumn = 0;
                    }
                    break;
                default:
                    zzR = false;
                    yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek)
                    yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1)
                        break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8)
                            break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 15: {
                setValue(Float.parseFloat(yytext()));
                return NUMBER;
            }
            case 16:
                break;
            case 12: {
                record("\t");
            }
            case 17:
                break;
            case 1: {
                return (int) yytext().charAt(0);
            }
            case 18:
                break;
            case 2: { /* ignore */
            }
            case 19:
                break;
            case 7: {
                setValue(endRecord());
                yybegin(YYINITIAL);
                return STRING;
            }
            case 20:
                break;
            case 11: {
                record("\\");
            }
            case 21:
                break;
            case 4: {
                setValue(yytext());
                return ID;
            }
            case 22:
                break;
            case 10: {
                record("\"");
            }
            case 23:
                break;
            case 8: {
                setValue(Long.parseLong(yytext().substring(0, yytext().length() - 1)));
                return NUMBER;
            }
            case 24:
                break;
            case 14: {
                record("\r");
            }
            case 25:
                break;
            case 3: {
                setValue(Integer.parseInt(yytext()));
                return NUMBER;
            }
            case 26:
                break;
            case 13: {
                record("\n");
            }
            case 27:
                break;
            case 9: {
                setValue(Double.parseDouble(yytext()));
                return NUMBER;
            }
            case 28:
                break;
            case 6: {
                record(yytext());
            }
            case 29:
                break;
            case 5: {
                startRecord();
                enter(QQ_STRING);
            }
            case 30:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    zzDoEOF();
                    {
                        return 0;
                    }
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
